/*
 * This sample code is provided by Misys for illustrative purposes only.
 * 
 * These examples have not been thoroughly tested under all conditions.
 * 
 * Misys, therefore, cannot guarantee or imply reliability, serviceability, or function of these programs.
 * 
 * All programs contained herein are provided to you "AS IS" without any warranties of any kind. The implied warranties of
 * non-infringement, merchantability and fitness for a particular purpose are expressly disclaimed.
 */
package com.misys.equation.common.test.xapi.standard;

import com.misys.equation.common.access.EquationStandardSession;
import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.access.EquationUnit;
import com.misys.equation.common.access.EquationUser;
import com.misys.equation.common.test.TestEnvironment;

// *************************************************************************************************
/**
 * 
 * 
 */
// *************************************************************************************************
public class MCD
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	protected static EquationStandardSession session;
	protected static EquationUnit unit;
	protected static EquationUser user;
	// *********************************************************************************************
	/**
	 * 
	 */
	// *********************************************************************************************
	private MCD()
	{
		try
		{
			unit = TestEnvironment.getTestEnvironment().getEquationUnit();
			user = TestEnvironment.getTestEnvironment().getEquationUser();
			session = user.getSession();
		}
		catch (Exception e)
		{
			System.out.println(e);
			e.printStackTrace();
		}
	}
	public static void main(String[] inputParameters)
	{
		MCD test = new MCD();
		test.test();
	}
	// *********************************************************************************************
	/**
	 * 
	 */
	// *********************************************************************************************
	public void test()
	{
		// Have a bash...
		try
		{
			EquationStandardTransaction transaction = new EquationStandardTransaction("G01MRRMCD", session);

			// Set the transaction type
			transaction.setMode("M");

			// 1 SCREEN
			transaction.setFieldValue("GZCUS", "XXXXXX"); // Customer mnemonic (6A)
			transaction.setFieldValue("GZCLC", "XXX"); // Customer location (3A)
			transaction.setFieldValue("GZCUN", "xxx PARIS"); // Customer full name (35A)
			transaction.setFieldValue("GZCUNA", ""); // Arabic customer full name (35A)
			transaction.setFieldValue("GZDAS", "ATLANTIC PARIS"); // Default account short name (15A)
			transaction.setFieldValue("GZDASA", ""); // Arabic account short name (15A)
			transaction.setFieldValue("GZBRNM", "LOND"); // Branch mnemonic (4A)
			transaction.setFieldValue("GZGRP", "ATLEUR"); // Group name (6A)
			transaction.setFieldValue("GZCA2", "ML"); // Sundry reference code (2A)
			transaction.setFieldValue("GZCTP", "AB"); // Customer type (2A)
			transaction.setFieldValue("GZCNAP", "GB"); // Parent country (2A)
			transaction.setFieldValue("GZCNAL", "FR"); // Residence country (2A)
			transaction.setFieldValue("GZCRB1", "00"); // Tax code 1 (2A)
			transaction.setFieldValue("GZCRB2", "00"); // Tax code 2 (2A)
			transaction.setFieldValue("GZCS", "Y"); // Consolidated statements (1A)

			// Apply the transaction
			session.addEquationTransaction(transaction);
			session.applyTransactions();

			// Commit
			session.commitTransactions();
			session.rollbackTransactions();
			System.out.println("finished!");
		}
		catch (Exception e)
		{
			System.out.println(e.toString());
			// Rollback any transactions for the unit
		}
	}
}
