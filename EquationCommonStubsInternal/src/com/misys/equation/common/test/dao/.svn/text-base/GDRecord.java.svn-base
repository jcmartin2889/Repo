package com.misys.equation.common.test.dao;

import com.misys.equation.common.dao.IGDRecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.GDRecordDataModel;
import com.misys.equation.common.test.EquationTestCaseDao;

/**
 * This is a unit-test which will test GDRecord services.
 * 
 * @author deroset
 * 
 */
public class GDRecord extends EquationTestCaseDao
{

	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	public GDRecord()
	{

	}

	/**
	 * This method is going to check the getRecord dao's service.<br>
	 * The obtained result should be the same than the preset in the dao data-model.
	 * 
	 */
	@Override
	public GDRecordDataModel getRecord()
	{

		GDRecordDataModel GDRecordDataModel = null;
		GDRecordDataModel = ((IGDRecordDao) dao).getGDRecord();
		assertDataModel(GDRecordDataModel);

		return GDRecordDataModel;
	}
	/**
	 * This method will test the update dao's service.
	 */
	@Override
	public void updateRecord()
	{

		GDRecordDataModel gdRecordDataModel = null;

		getMyModel().setUserId("WILL");
		getMyModel().setOptionId("ASI");
		dao.updateRecord();
		gdRecordDataModel = getRecord();
		assertEquals(getMyModel().getUserId(), gdRecordDataModel.getUserId());
		assertEquals(getMyModel().getOptionId(), gdRecordDataModel.getOptionId());
	}

	/**
	 * This method will test the add dao's service.
	 */
	@Override
	public void insertRecord()
	{

		dao.insertRecord();
	}

	/**
	 * This method will test the delete dao's service.
	 */
	@Override
	public void deleteRecord()
	{

		dao.deleteRecord();
	}

	@Override
	protected void assertDataModel(AbsRecord dataModel)
	{
		GDRecordDataModel GDRecordDataModel = (GDRecordDataModel) dataModel;
		GDRecordDataModel myDataModel = getMyModel();

		assertEquals(myDataModel.getUserId(), GDRecordDataModel.getUserId());
		assertEquals(myDataModel.getOptionId(), GDRecordDataModel.getOptionId());
	}

	@Override
	protected boolean checkIfThisRecordIsInTheDB()
	{
		boolean result;
		result = ((IGDRecordDao) dao).checkIfThisGDRecordIsInTheDB();

		return result;
	}

	/**
	 * 
	 * This method is going to retrieve the Dao from the bean repository and set it as local attribute.
	 */
	@Override
	protected void setDao()
	{
		dao = daoFactory.getGDDao(session, dataModel);
	}

	@Override
	protected void setDataModel()
	{
		dataModel = new GDRecordDataModel("WILL", "ABE");
	}

	/**
	 * This method is going to return a casted data model.
	 * 
	 * @return a casted data model
	 */
	public GDRecordDataModel getMyModel()
	{

		GDRecordDataModel GDRecordDataModel = null;

		if (dataModel instanceof GDRecordDataModel)
		{
			GDRecordDataModel = (GDRecordDataModel) dataModel;

		}
		else
		{
			throw new IllegalArgumentException("The set data-model does not correspond to the expected one.");
		}

		return GDRecordDataModel;
	}
}
