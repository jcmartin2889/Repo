/**
 * Copyright and all other intellectual property rights in this software, in any form, is vested in Misys International Banking
 * Systems Ltd ("Misys") or a related company.
 * 
 * This software may not be copied, amended, compiled, translated, or developed; or sold, leased, hired, rented, or disclosed to any
 * third party without the prior written consent of Misys.
 * 
 * Copyright Misys International Banking Systems Ltd, 1975 and later
 */

package com.misys.equation.common.test.transaction;

import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.access.IEquationStandardObject;
import com.misys.equation.common.test.EquationTestCaseMaintain;

/**
 * Equation test cases for Maintain function
 */
public class GCT extends EquationTestCaseMaintain
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	String programName = "F76MRR";
	String optionId = "GCT";

	// ------------------------------------------------------------------------ JUNIT's overloaded methods
	/**
	 * Setup
	 */
	@Override
	public void setUp() throws Exception
	{
		super.setUp();
	}

	// ------------------------------------------------------------------------ Helper methods
	/**
	 * Return a transaction
	 * 
	 * @return a transaction
	 * 
	 * @throws Exception
	 */
	@Override
	public EquationStandardTransaction getTransaction() throws Exception
	{
		EquationStandardTransaction transaction = getEquationStandardTransaction(programName + optionId);
		transaction.setWorkStationId(WORKSTATIONID);
		return transaction;
	}

	// ------------------------------------------------------------------------ Field setups

	/*
	 * Note: This function has only one record, so the 'validate non existing record' test etc will succeed not fail. There are no
	 * key fields.
	 */

	/**
	 * Setup a non-existing key fields
	 */
	@Override
	public void setupNonExistKeyFields(EquationStandardTransaction transaction)
	{
		// transaction.setField("GZCCD", "TI"); // Charge code (2A)
	}

	/**
	 * Setup an existing key fields
	 */
	@Override
	public void setupExistKeyFields(EquationStandardTransaction transaction)
	{

	}

	/**
	 * Setup the mandatory fields (add mode)
	 */
	@Override
	public void setupMaintFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZCCD", "TI"); // Charge code (2A)
		transaction.setFieldValue("GZCHGL", "1234"); // Charge in local ccy (15P,0)
		transaction.setFieldValue("GZCRAT", ""); // Charge rate percent (11P,7)
		transaction.setFieldValue("GZTRAT", "0.105"); // Tax rate percent (11P,7)

	}

	// Expect result 'true' not 'false'
	@Override
	public void test00100Maint_Validate_NonExistingRecord() throws Exception
	{
		EquationStandardTransaction transaction = getTransaction();
		transaction.setMode(IEquationStandardObject.FCT_MNT);
		setupNonExistKeyFields(transaction);
		setupMaintFields(transaction);
		applyValidate(transaction, true);
		currentTransaction = transaction;
	}

	// Expect result 'true' not 'false'
	@Override
	public void test00200Maint_Retrieval_NonExistingRecord() throws Exception
	{
		EquationStandardTransaction transaction = getTransaction();
		transaction.setMode(IEquationStandardObject.FCT_MNT);
		setupNonExistKeyFields(transaction);
		applyRetrieval(transaction, true);
		currentTransaction = transaction;
	}

	// Expect result 'true' not 'false'
	@Override
	public void test00300Maint_NonExistingRecord() throws Exception
	{
		EquationStandardTransaction transaction = getTransaction();
		transaction.setMode(IEquationStandardObject.FCT_MNT);
		setupNonExistKeyFields(transaction);
		setupMaintFields(transaction);
		applyTransaction(transaction, true);
		currentTransaction = transaction;
	}
}
