/**
 * Copyright and all other intellectual property rights in this software, in any form, is vested in Misys International Banking
 * Systems Ltd ("Misys") or a related company.
 * 
 * This software may not be copied, amended, compiled, translated, or developed; or sold, leased, hired, rented, or disclosed to any
 * third party without the prior written consent of Misys.
 * 
 * Copyright Misys International Banking Systems Ltd, 1975 and later
 */

package com.misys.equation.common.test.transaction;

import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.test.EquationTestCaseMaintain;
import com.misys.equation.common.test.TestEnvironment;

/**
 * Equation test cases for Authorise/Return Referred Cheques
 */
public class ARS_Authorise_Return_Referred_Cheque extends EquationTestCaseMaintain
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	String programName = "J64MRR";
	String optionId = "ARS";
	String addOptionId = "MDC";

	// ------------------------------------------------------------------------ JUNIT's overloaded methods
	/**
	 * Setup
	 */
	@Override
	public void setUp() throws Exception
	{
		super.setUp();
	}

	// ------------------------------------------------------------------------ Helper methods
	/**
	 * Return a transaction
	 * 
	 * @return a transaction
	 * 
	 * @throws Exception
	 */
	@Override
	public EquationStandardTransaction getTransaction() throws Exception
	{
		EquationStandardTransaction transaction = getEquationStandardTransaction(programName + optionId);
		transaction.setWorkStationId(WORKSTATIONID);
		return transaction;
	}

	// ------------------------------------------------------------------------ Field setups

	/**
	 * Setup a non-existing key fields
	 */
	@Override
	public void setupNonExistKeyFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZDREF", "X"); // Deposit reference (12A)
	}

	/**
	 * Setup an existing key fields
	 */
	@Override
	public void setupExistKeyFields(EquationStandardTransaction transaction)
	{
		String reference = TestEnvironment.getTestEnvironment().getParameter("Cheque_Deposit_Suite");
		if (reference != null)
		{
			transaction.setFieldValue("GZDREF", reference); // Off-line deposit reference (12A)
		}
		else
		{
			transaction.setFieldValue("GZDREF", "Unknown"); // Transaction refer
		}
	}

	/**
	 * Setup the mandatory fields (add mode)
	 */
	@Override
	public void setupMaintFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZITM", "001"); // deposit item number (3P,0)
		transaction.setFieldValue("GZRAP", "B"); // Reffering application (1A)
		transaction.setFieldValue("GZSRL", "1"); // Cheque serial number (16A)
		transaction.setFieldValue("GZTTP", "F"); // Refferal reason; C=Stop, F=Other (1A)
		transaction.setFieldValue("GZUSID", "BIANZOC1"); // Authorising user (10A)
	}

	/**
	 * Test: retrieval mode: existing record<br>
	 * Expected result: Success<br>
	 * 
	 * @throws Exception
	 */
	@Override
	public void test00700Maint_RetrievalMaintain_ExistingRecord() throws Exception
	{
		// This method is not valid as the Cheque Item status has been changed by
		// the previous API call. A second maintenance is not possible.
	}

}
