/**
 * Copyright and all other intellectual property rights in this software, in any form, is vested in Misys International Banking
 * Systems Ltd ("Misys") or a related company.
 * 
 * This software may not be copied, amended, compiled, translated, or developed; or sold, leased, hired, rented, or disclosed to any
 * third party without the prior written consent of Misys.
 * 
 * Copyright Misys International Banking Systems Ltd, 1975 and later
 */

package com.misys.equation.common.test.transaction;

import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.test.EquationTestCaseMaintainCancel;

/**
 * Equation test cases for Maintain/Delete Basic Account Hold
 */
public class MAH extends EquationTestCaseMaintainCancel
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	String programName = "J40MRR";
	String optionId = "MAH";

	// ------------------------------------------------------------------------ JUNIT's overloaded methods
	/**
	 * Setup
	 */
	@Override
	public void setUp() throws Exception
	{
		super.setUp();
		retrieveBeforeCancel = false;
	}

	// ------------------------------------------------------------------------ Helper methods
	/**
	 * Return a transaction
	 * 
	 * @return a transaction
	 * 
	 * @throws Exception
	 */
	@Override
	public EquationStandardTransaction getTransaction() throws Exception
	{
		EquationStandardTransaction transaction = getEquationStandardTransaction(programName + optionId);
		transaction.setWorkStationId(WORKSTATIONID);
		return transaction;
	}

	// ------------------------------------------------------------------------ Field setups

	/**
	 * Setup an existing key fields only
	 */
	@Override
	public void setupExistKeyFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZBBN", "0543"); // Branch number (4A)
		transaction.setFieldValue("GZBNO", "123457"); // Customer number (6A)
		transaction.setFieldValue("GZSFX", "060"); // Account suffix (3A)
		transaction.setFieldValue("GZHNO", "001"); // Hold number (3P,0)
		/*
		 * Alternatively the following keys can be used.
		 * 
		 * transaction.setFieldValue("GZCUS", "DAIICH"); // Customer mnemonic (6A) transaction.setFieldValue("GZCLC", "LON"); //
		 * Customer location (3A) transaction.setFieldValue("GZSFX", "060"); // Account suffix (3A)
		 * transaction.setFieldValue("GZBRNM", "LOND"); // Branch mnemonic (4A) transaction.setFieldValue("GZHNO", "001"); // Hold
		 * number (3P,0)
		 */
	}

	/**
	 * Setup a non-existing key fields only
	 */
	@Override
	public void setupNonExistKeyFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZBBN", "9889"); // Branch number (4A)
		transaction.setFieldValue("GZBNO", "987789"); // Customer number (6A)
		transaction.setFieldValue("GZSFX", "989"); // Account suffix (3A)
		transaction.setFieldValue("GZHNO", "999"); // Hold number (3P,0)
		/*
		 * Alternatively the following keys can be used.
		 * 
		 * transaction.setFieldValue("GZCUS", "DAIICH"); // Customer mnemonic (6A) transaction.setFieldValue("GZCLC", "LON"); //
		 * Customer location (3A) transaction.setFieldValue("GZSFX", "989"); // Account suffix (3A)
		 * transaction.setFieldValue("GZBRNM", "LOND"); // Branch mnemonic (4A) transaction.setFieldValue("GZHNO", "999"); // Hold
		 * number (3P,0)
		 */
	}

	/**
	 * Setup the mandatory fields (maintain mode)
	 */
	@Override
	public void setupMaintFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZAMTH", "1500000"); // Hold amount (15P,0)
		transaction.setFieldValue("GZACO", "AUD"); // Responsibility code (3A)
		transaction.setFieldValue("GZHRC", "NE2"); // Hold reason code (3A)
		transaction.setFieldValue("GZHDD1", "Maintained"); // Hold description line1 (35A)
	}

}
