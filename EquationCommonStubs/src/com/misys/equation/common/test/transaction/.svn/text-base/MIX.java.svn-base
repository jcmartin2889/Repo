/**
 * Copyright and all other intellectual property rights in this software, in any form, is vested in Misys International Banking
 * Systems Ltd ("Misys") or a related company.
 * 
 * This software may not be copied, amended, compiled, translated, or developed; or sold, leased, hired, rented, or disclosed to any
 * third party without the prior written consent of Misys.
 * 
 * Copyright Misys International Banking Systems Ltd, 1975 and later
 */

package com.misys.equation.common.test.transaction;

import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.test.EquationTestCaseAddMore;

/**
 * Equation test cases for Post Manual Interest - Internal A/C
 */
public class MIX extends EquationTestCaseAddMore
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	String programName = "F20ARR";
	String optionId = "MIX";

	// ------------------------------------------------------------------------ JUNIT's overloaded methods
	/**
	 * Setup
	 */
	@Override
	public void setUp() throws Exception
	{
		super.setUp();
	}

	// ------------------------------------------------------------------------ Helper methods
	/**
	 * Return a transaction
	 * 
	 * @return a transaction
	 * 
	 * @throws Exception
	 */
	@Override
	public EquationStandardTransaction getTransaction() throws Exception
	{
		EquationStandardTransaction transaction = getEquationStandardTransaction(programName + optionId);
		transaction.setWorkStationId(WORKSTATIONID);
		return transaction;
	}

	// ------------------------------------------------------------------------ Field setups

	/**
	 * Setup a non-existing key fields only
	 */
	@Override
	public void setupNonExistKeyFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZBBNC", "0000"); // Account branch
		transaction.setFieldValue("GZCPNC", "000000"); // Basic part of account number
		transaction.setFieldValue("GZCPSC", "001"); // Account suffix
		transaction.setFieldValue("GZPOS", "DR"); // Adjustment type flag CR/DR
	}

	/**
	 * Setup an existing key fields
	 */
	@Override
	public void setupExistKeyFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZBBNC", "0000"); // Account branch
		transaction.setFieldValue("GZCPNC", "800008"); // Basic part of account number
		transaction.setFieldValue("GZCPSC", "001"); // Account suffix
		transaction.setFieldValue("GZPOS", "DR"); // Adjustment type flag CR/DR
	}

	/**
	 * Setup the mandatory fields
	 */
	@Override
	public void setupAddFields(EquationStandardTransaction transaction)
	{
		transaction.setFieldValue("GZBBNI", "0000"); // Interest account branch
		transaction.setFieldValue("GZCPNI", "870100"); // Interest account basic number
		transaction.setFieldValue("GZCPSI", "826"); // Interest account suffix
		transaction.setFieldValue("GZCCY", "GBP"); // Currency mnemonic
		transaction.setFieldValue("GZAMT", "1"); // Amount
		transaction.setFieldValue("GZINT", "DR"); // Interest type flag CR/DR
		transaction.setFieldValue("GZVAL", "1000105"); // Value from date
		transaction.setFieldValue("GZI", "Y"); // Internal or customer account flag, Y=internal
	}

}
