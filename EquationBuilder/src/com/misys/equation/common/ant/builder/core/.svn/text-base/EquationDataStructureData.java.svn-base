package com.misys.equation.common.ant.builder.core;

import java.io.CharConversionException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Types;
import java.util.Iterator;
import java.util.Set;

import com.ibm.as400.access.Record;
import com.misys.equation.common.ant.builder.helpText.helpers.Toolbox;

/**
 * @author weddelc1
 */
public class EquationDataStructureData
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	private EquationDataStructure eqDS = null;
	private Record rcd = null;
	private static final EquationLogger LOG = new EquationLogger(EquationDataStructureData.class);

	/**
	 * constructor
	 */
	public EquationDataStructureData(EquationDataStructure eqDS)
	{
		this.eqDS = eqDS;
		try
		{
			rcd = new Record(eqDS.getRcdFmt(), eqDS.getInitialBytes());
		}
		catch (UnsupportedEncodingException unsupportedEncodingException)
		{
			if (LOG.isErrorEnabled())
			{
				LOG.error(unsupportedEncodingException);
			}
		}
	}

	/**
	 * 
	 */
	public void setFieldValue(String fieldName, String fieldValue)
	{
		EquationFieldDefinition fieldDefinition = eqDS.getFieldDefinition(fieldName);
		if (!(fieldDefinition == null))
		{
			BigDecimal fieldValueNumber;
			int fieldType = fieldDefinition.getFieldDataType();
			int fieldLength = fieldDefinition.getFieldLength();
			if (fieldType == Types.CHAR || fieldType == Types.BINARY || fieldType == Types.VARCHAR || fieldType == Types.VARBINARY)
			{
				rcd.setField(fieldName.toUpperCase(), Toolbox.trim(fieldValue, fieldLength));
			}
			else
			{
				// Have a bash at parsing what we've been passed as a decimal
				try
				{
					fieldValueNumber = new BigDecimal(fieldValue);
					rcd.setField(fieldName.toUpperCase(), fieldValueNumber);
				}
				catch (NumberFormatException numberFormatException)
				{
					if (LOG.isWarnEnabled())
					{
						LOG.warn(numberFormatException);
					}
					rcd.setField(fieldName.toUpperCase(), new BigDecimal(0));
				}
			}
		}
	}

	/**
	 * 
	 */
	public void setBytes(byte[] bytes)
	{
		try
		{
			rcd.setContents(bytes);
		}
		catch (UnsupportedEncodingException unsupportedEncodingException)
		{
			if (LOG.isErrorEnabled())
			{

				LOG.error(unsupportedEncodingException);
			}
		}
	}

	/**
	 * 
	 */
	public byte[] getBytes()
	{
		try
		{
			return rcd.getContents();
		}
		catch (CharConversionException charConversionException)
		{
			if (LOG.isErrorEnabled())
			{

				LOG.error(charConversionException);
			}

			return null;
		}
		catch (UnsupportedEncodingException unsupportedEncodingException)
		{
			if (LOG.isErrorEnabled())
			{
				LOG.error(unsupportedEncodingException);
			}
			return null;
		}
	}

	/**
	 * Return the Equation Data Structure
	 * 
	 * @return the Equation Data Structure
	 */
	public EquationDataStructure getEqDS()
	{
		return eqDS;
	}

	/**
	 * Return the field value of the field
	 * 
	 * @return the field value of the field
	 * 
	 */
	public String getFieldValue(String fieldName)
	{
		EquationFieldDefinition fieldDefinition = eqDS.getFieldDefinition(fieldName);
		BigDecimal fieldValueNumber;
		String fieldValue = "";
		if (!(fieldDefinition == null))
		{
			try
			{
				int fieldType = fieldDefinition.getFieldDataType();
				if (fieldType == Types.CHAR || fieldType == Types.BINARY || fieldType == Types.VARCHAR
								|| fieldType == Types.VARBINARY)
				{
					fieldValue = (String) (rcd.getField(fieldName.toUpperCase()));
				}
				else
				{
					fieldValueNumber = (BigDecimal) (rcd.getField(fieldName.toUpperCase()));
					fieldValue = fieldValueNumber.toPlainString();
				}
			}
			catch (UnsupportedEncodingException e)
			{
				LOG.error(e);
			}
		}
		return fieldValue;
	}

	/**
	 * Return the String representation of the content of the data structure
	 * 
	 * @return the String representation of the content of the data structure
	 */
	@Override
	public String toString()
	{
		StringBuffer serialisation = new StringBuffer();
		Set<String> keySet = eqDS.getFieldNames();
		Iterator<String> keys = keySet.iterator();

		while (keys.hasNext())
		{
			String fieldName = keys.next();
			EquationFieldDefinition fd = getEqDS().getFieldDefinition(fieldName);
			String fieldNameCol = String.format("%-20s", fieldName);
			String fieldValueCol = String.format("%-20s", getFieldValue(fieldName));
			String fieldTypeCol = String.format("%-20s", fd.getFieldDataTypeString());
			String fieldValueHexCol = String.format("%-20s", getBytesString(fd.getFieldStartIndex(), fd.getInternalFieldLength()));
			serialisation.append(fieldNameCol + ":" + fieldTypeCol + ":" + fieldValueCol + ":" + fieldValueHexCol + "\n");
		}

		return serialisation.toString();
	}

	/**
	 * Return the String representation of a byte array
	 * 
	 * @param start
	 *            - starting index within the array
	 * @param length
	 *            - the length
	 * 
	 * @return the String representation of a byte array
	 */
	private String getBytesString(int start, int length)
	{
		StringBuffer buffer = new StringBuffer();

		// get the byte data
		byte[] byteData = getBytes();

		// initialise the end position
		int end = start + length;
		if (byteData.length < end)
		{
			end = byteData.length;
		}

		for (int i = start; i < end; i++)
		{
			buffer.append(String.format("%X ", byteData[i]));
		}

		return buffer.toString();
	}

	/**
	 * Copy content from another Equation data structure data of the same definition
	 * 
	 * @param eqDsData
	 *            - the Equation data structure data to copy from
	 */
	public void copy(EquationDataStructureData eqDsData)
	{
		setBytes(eqDsData.getBytes());
	}

	/**
	 * Reset the content to the initial value
	 */
	public void reset()
	{
		setBytes(eqDS.getInitialBytes());
	}
}
