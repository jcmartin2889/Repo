package com.misys.equation.function.linkage;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.misys.equation.common.internal.eapi.core.EQException;
import com.misys.equation.function.beans.DisplayAttributes;
import com.misys.equation.function.beans.DisplayAttributesSet;
import com.misys.equation.function.beans.DisplayGroup;
import com.misys.equation.function.beans.DisplayItemList;
import com.misys.equation.function.beans.Element;
import com.misys.equation.function.beans.IDisplayItem;
import com.misys.equation.function.beans.Layout;
import com.misys.equation.function.tools.XMLToolbox;

public class ServiceLinkageLayout extends AbstractServiceLinkage
{

	//This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	// the linked layout
	protected Layout linkedLayout;

	// the list of display attributes in the service
	protected Map<String, IDisplayItem> displayAttributesMap;

	// the list of display group in the service
	protected Map<String, IDisplayItem> displayGroupsMap;

	// the list of other display items in the service
	protected Map<String, IDisplayItem> displayItemsMap;

	/**
	 * Constructor
	 * 
	 * @param primaryFunction
	 *            - the primary function
	 * 
	 * @throws EQException
	 */
	public ServiceLinkageLayout(Layout primaryLayout) throws EQException
	{
		this.linkedLayout = XMLToolbox.getXMLToolbox().duplicateLayout(primaryLayout);

	}

	/**
	 * Return the linked function
	 * 
	 * @return the linked function
	 */
	public Layout getlinkedLayout()
	{
		return linkedLayout;
	}

	/**
	 * Link the secondary functions to the primary function
	 * 
	 * @param secondaryFunctions
	 *            - the secondary functions
	 * 
	 * @return the linked layout
	 * 
	 * @throws EQException
	 */
	protected Layout link(Layout... secondaryLayouts) throws EQException
	{
		// clear all messages
		messageContainer.clear();

		// retrieve all the display items
		getAllDisplayItems();

		// add alll the secondary functions
		for (Layout secondaryLayout : secondaryLayouts)
		{
			addLayout(secondaryLayout);
		}

		return linkedLayout;
	}

	/**
	 * Retrieve all the display items from the linked layout
	 * 
	 * @throws EQException
	 */
	protected void getAllDisplayItems() throws EQException
	{
		displayAttributesMap = new HashMap<String, IDisplayItem>();
		displayGroupsMap = new HashMap<String, IDisplayItem>();
		displayItemsMap = new HashMap<String, IDisplayItem>();

		for (DisplayAttributesSet displayAttributesSet : linkedLayout.getDisplayAttributesSets())
		{
			getAllDisplayItems(linkedLayout.getId(), displayAttributesSet.getId(), displayAttributesSet.getDisplayItems());
		}

	}

	/**
	 * Retrieve all the display items from the display attributes set
	 * 
	 * @param id
	 *            - the id of the parent containing the display item list
	 * @param id2
	 *            - the subgroup
	 * @param displayItemList
	 *            - the list of display items
	 * 
	 * @throws EQException
	 */
	protected void getAllDisplayItems(String id, String id2, DisplayItemList displayItemList) throws EQException
	{
		for (IDisplayItem displayItem : displayItemList)
		{
			// Display Group?
			if (displayItem instanceof DisplayGroup)
			{
				DisplayGroup displayGroup = (DisplayGroup) displayItem;
				displayGroupsMap.put(displayGroup.getId(), displayItem);
				getAllDisplayItems(id, displayGroup.getId(), displayGroup.getDisplayItems());
			}

			// Display Attributes?
			if (displayItem instanceof DisplayAttributes)
			{
				displayAttributesMap.put(((DisplayAttributes) displayItem).getId(), displayItem);
			}

			// Any element
			else if (displayItem instanceof Element)
			{
				displayItemsMap.put(((Element) displayItem).getId(), displayItem);
			}

			// Not an element
			else
			{
				addMessage("Language.LinkageUnknownDisplayItemError", id, id2, "", "", "");
			}
		}
	}

	/**
	 * Append the secondary layout to the linked layout
	 * 
	 * @param secondaryLayout
	 *            - the second layout
	 * 
	 * @throws EQException
	 */
	protected void addLayout(Layout secondaryLayout) throws EQException
	{
		// Add the display fields
		addDisplayAttributesSets(secondaryLayout, secondaryLayout.getDisplayAttributesSets());
	}

	/**
	 * Append the list of display attributes set to the linked layout
	 * 
	 * @param secondaryLayout
	 *            - the secondary layout
	 * @param secondaryDisplayAttributesSets
	 *            - the list of display attributes set to be added
	 * 
	 * @throws EQException
	 */
	protected void addDisplayAttributesSets(Layout secondaryLayout, List<DisplayAttributesSet> secondaryDisplayAttributesSets)
					throws EQException
	{
		for (DisplayAttributesSet secondaryDisplayAttributesSet : secondaryDisplayAttributesSets)
		{
			addDisplayAttributesSet(secondaryLayout, secondaryDisplayAttributesSet);
		}
	}

	/**
	 * Append the display attributes set to the linked layout
	 * 
	 * @param secondaryLayout
	 *            - the secondary layout
	 * @param secondaryDisplayAttributesSet
	 *            - the display attributes set to be added
	 * 
	 * @throws EQException
	 */
	protected void addDisplayAttributesSet(Layout secondaryLayout, DisplayAttributesSet secondaryDisplayAttributesSet)
					throws EQException
	{
		ServiceLinkageDisplayAttributesSet linkage = new ServiceLinkageDisplayAttributesSet(linkedLayout, displayGroupsMap,
						displayAttributesMap, displayItemsMap);
		linkage.link(secondaryLayout, secondaryDisplayAttributesSet);
		messageContainer.addMessages(linkage.getMessageContainer());
	}

}
