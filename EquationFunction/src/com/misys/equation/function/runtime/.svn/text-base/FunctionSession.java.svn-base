package com.misys.equation.function.runtime;

import java.util.Calendar;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.ibm.as400.access.BidiStringType;
import com.misys.equation.common.access.EquationStandardListTable;
import com.misys.equation.common.access.EquationStandardObjectHelper;
import com.misys.equation.common.access.EquationStandardSession;
import com.misys.equation.common.access.EquationStandardTransaction;
import com.misys.equation.common.access.IEquationStandardObject;
import com.misys.equation.common.dao.DaoFactory;
import com.misys.equation.common.dao.ISessionRecordDao;
import com.misys.equation.common.dao.IWE2RecordDao;
import com.misys.equation.common.dao.IWERecordDao;
import com.misys.equation.common.dao.IWEYRecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.SessionRecordDataModel;
import com.misys.equation.common.dao.beans.WE2RecordDataModel;
import com.misys.equation.common.dao.beans.WERecordDataModel;
import com.misys.equation.common.dao.beans.WEYRecordDataModel;
import com.misys.equation.common.internal.eapi.core.EQException;
import com.misys.equation.common.utilities.EqBeanFactory;
import com.misys.equation.common.utilities.Toolbox;
import com.misys.equation.function.beans.APIFieldSet;
import com.misys.equation.function.beans.FunctionData;
import com.misys.equation.function.tools.MakerCheckerUtility;

public class FunctionSession
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	private String optionId;
	private String sessionId;
	private String transactionId;
	private String userId;

	private boolean sessionRestored;
	private FunctionData functionData;
	private FunctionData functionCRMData;
	private FunctionData functionEFCData;
	private FunctionData functionEFC2Data;
	private FunctionMessages functionMessages;
	private FunctionMessages warningMessages;
	private FunctionData beforeImage;
	private int screenSetId;
	private int lastScrnSetId;
	private int scrnNo;
	private String status;
	private String statusOriginal;
	private String authLevel;
	private String loadMode;
	private String authorisor;
	private String referralPattern;
	private boolean resubmitted = false;
	private final DaoFactory daoFactory = new DaoFactory();

	/**
	 * Construct a Function Session with autogenerated transaction id
	 * 
	 * @param optionId
	 *            - option id
	 * @param sessionId
	 *            - session id
	 * @param userId
	 *            - user id
	 */
	public FunctionSession(String optionId, String sessionId, String userId)
	{
		this.optionId = optionId;
		this.sessionId = sessionId;
		this.userId = userId;
		this.transactionId = generateTransactionId();
		this.sessionRestored = false;
	}

	/**
	 * Construct a Function Session with transaction id
	 * 
	 * @param optionId
	 *            - option id
	 * @param sessionId
	 *            - session id
	 * @param userId
	 *            - user id
	 * @param transactionId
	 *            - transaction id
	 */
	public FunctionSession(String optionId, String sessionId, String userId, String transactionId)
	{
		this.optionId = optionId;
		this.sessionId = sessionId;
		this.userId = userId;
		this.transactionId = transactionId;
		this.sessionRestored = false;

		// cannot have blank transaction Id
		if (transactionId.trim().length() == 0)
		{
			this.transactionId = generateTransactionId();
		}
	}

	/**
	 * Return the option id
	 * 
	 * @return - the option id
	 */
	public String getOptionId()
	{
		return optionId;
	}

	/**
	 * Set the option id
	 * 
	 * @param optionId
	 *            - the option id
	 */
	public void setOptionId(String optionId)
	{
		this.optionId = optionId;
	}

	/**
	 * Return the session id
	 * 
	 * @return the session id
	 */
	public String getSessionId()
	{
		return sessionId;
	}

	/**
	 * Set the session id
	 * 
	 * @param sessionId
	 *            - the session id
	 */
	public void setSessionId(String sessionId)
	{
		this.sessionId = sessionId;
	}

	/**
	 * Return the transaction id
	 * 
	 * @return the transaction id
	 */
	public String getTransactionId()
	{
		return transactionId;
	}

	/**
	 * Set the transaction id
	 * 
	 * @param transactionId
	 *            - the transaction id
	 */
	public void setTransactionId(String transactionId)
	{
		this.transactionId = transactionId;
	}

	/**
	 * Return the user id
	 * 
	 * @return the user id
	 */
	public String getUserId()
	{
		return userId;
	}

	/**
	 * Set the user id
	 * 
	 * @param userId
	 *            - the user id
	 */
	public void setUserId(String userId)
	{
		this.userId = userId;
	}

	/**
	 * Determine if this session has been restored from the database
	 * 
	 * @return true if this session has been restored from the database
	 */
	public boolean isSessionRestored()
	{
		return sessionRestored;
	}

	/**
	 * Set whether this session has been restored from the database
	 * 
	 * @param sessionRestored
	 *            - true if this session has been restored from the database
	 */
	public void setSessionRestored(boolean sessionRestored)
	{
		this.sessionRestored = sessionRestored;
	}

	/**
	 * Return the Function Data of the restored session
	 * 
	 * @return the Function Data of the restored session
	 */
	public FunctionData getFunctionData()
	{
		return functionData;
	}

	/**
	 * Return the Function CRM Data of the restored session
	 * 
	 * @return the Function CRM Data of the restored session
	 */
	public FunctionData getFunctionCRMData()
	{
		return functionCRMData;
	}

	/**
	 * Return the Function EFC Data of the restored session
	 * 
	 * @return the Function EFC Data of the restored session
	 */
	public FunctionData getFunctionEFCData()
	{
		return functionEFCData;
	}

	/**
	 * Return the single charge detail of the restored session
	 * 
	 * @return the single charge detail of the restored session
	 */
	public FunctionData getFunctionEFC2Data()
	{
		return functionEFC2Data;
	}

	/**
	 * Return the Function Messages of the restored session
	 * 
	 * @return the Function Messages of the restored session
	 */
	public FunctionMessages getFunctionMessages()
	{
		return functionMessages;
	}

	/**
	 * Return the list of overridden warning messages of the restored session
	 * 
	 * @return the list of overridden warning messages of the restored session
	 */
	public FunctionMessages getWarningMessages()
	{
		return warningMessages;
	}

	/**
	 * Return the before image
	 * 
	 * @return the before image
	 */
	public FunctionData getBeforeImage()
	{
		return beforeImage;
	}

	/**
	 * Return the screen set id of the restored session
	 * 
	 * @return the screen set id of the restored session
	 */
	public int getScreenSetId()
	{
		return screenSetId;
	}

	/**
	 * Return the screen number of the restored session
	 * 
	 * @return the screen number of the restored session
	 */
	public int getScrnNo()
	{
		return scrnNo;
	}

	/**
	 * Return the last screen set id viewed
	 * 
	 * @return the last screen set id viewed
	 */
	public int getLastScrnSetId()
	{
		return lastScrnSetId;
	}

	/**
	 * Return the authorisation status
	 * 
	 * @return the authorisation status
	 */
	public String getStatus()
	{
		return status;
	}

	/**
	 * Return the original authorisation status
	 * 
	 * @return the original authorisation status
	 */
	public String getStatusOriginal()
	{
		return statusOriginal;
	}

	/**
	 * Return the authorisation status
	 * 
	 * @return the authorisation status
	 */
	public String getAuthLevel()
	{
		return authLevel;
	}

	/**
	 * Return the authorisor
	 * 
	 * @return the authorisor
	 */
	public String getAuthorisor()
	{
		return authorisor;
	}

	/**
	 * Return the function load mode
	 * 
	 * @return the function load mode
	 */
	public String getLoadMode()
	{
		return loadMode;
	}

	/**
	 * Return the session key
	 * 
	 * @return the session record key
	 */
	public SessionRecordDataModel rtvSessionRecordKey()
	{
		SessionRecordDataModel sessionRecord = new SessionRecordDataModel(optionId, sessionId, transactionId, userId);

		return sessionRecord;
	}

	/**
	 * Return the WE record key
	 * 
	 * @return the WE record key
	 */
	public WERecordDataModel rtvWERecordKey()
	{
		WERecordDataModel weRecord = new WERecordDataModel(optionId, sessionId, transactionId, userId);
		return weRecord;
	}

	/**
	 * Return the WEY record key
	 * 
	 * @return the WEY record key
	 */
	public WEYRecordDataModel rtvWEYRecordKey()
	{
		WEYRecordDataModel weyRecord = new WEYRecordDataModel(optionId, sessionId, transactionId, userId, "");
		return weyRecord;
	}

	/**
	 * Generate the default transaction id
	 * 
	 * @return the transaction id
	 * 
	 */
	public String generateTransactionId()
	{
		return "A" + Toolbox.formatDate(Calendar.getInstance(), Toolbox.TIMESTAMP_FORMAT);
	}

	/**
	 * Save the session records
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * @param sessionRecord
	 *            - the session record
	 * @param weRecord
	 *            - the WE record
	 * 
	 * @throws EQException
	 */
	public void save(EquationStandardSession session, boolean commit, SessionRecordDataModel sessionRecord,
					WERecordDataModel weRecord) throws EQException
	{
		try
		{
			// DAO factory
			ISessionRecordDao dao = daoFactory.getSessionDao(session, sessionRecord);
			IWERecordDao weDao = daoFactory.getWEDao(session, weRecord);

			// update session record
			if (sessionRecord != null)
			{
				dao.insertOrUpdateRecord();
			}

			// update WE record
			if (weRecord != null)
			{
				weDao.insertOrUpdateRecord(weRecord);
			}

			// commit the changes
			if (commit)
			{
				session.connectionCommit();
			}

			// if the session has been saved, but the status is not "complete", assume
			// that the user is still in the session
			sessionRestored = weRecord.getAuthStat().equals(WERecordDataModel.STAT_CHECK);
		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: save() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: save() Failed: " + Toolbox.getExceptionMessage(e), e);
		}
	}

	/**
	 * Save a session for further input
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * @param scrnNo
	 *            - the screen number
	 * @param functionData
	 *            - the function data
	 * @param status
	 *            - session status
	 */
	public void save(EquationStandardSession session, boolean commit, ScreenSetHandler screenSetHandler,
					FunctionMsgManager functionMsgManager, String status) throws EQException
	{
		save(session, commit, screenSetHandler, functionMsgManager, "", status, WERecordDataModel.LVL_ALL, false);
	}

	/**
	 * Save a session for a particular checker with status
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * @param scrnNo
	 *            - the screen number
	 * @param functionData
	 *            - the function data
	 * @param supervisorId
	 *            - the checker id who will check the transaction
	 * @param authStatus
	 *            - the authorisation status
	 * @param authLevel
	 *            - the authorisation level
	 * @param offline
	 *            - offline?
	 * 
	 * @throws EQException
	 */
	public void save(EquationStandardSession session, boolean commit, ScreenSetHandler screenSetHandler,
					FunctionMsgManager functionMsgManager, String supervisorId, String authStatus, String authLevel, boolean offline)
					throws EQException
	{
		// retrieve the screen set
		List<ScreenSet> screenSets = screenSetHandler.getScreenSets();

		// setup the session
		SessionRecordDataModel sessionRecord = rtvSessionRecordKey();

		// Get all the data and put it into the sessionRecord (initialise the CRM and EFC to blank)
		sessionRecord.setFunctionData(screenSets.get(ScreenSetHandler.FUNCTION_DATA_SCREEN).getFunctionData().cvtToXML());
		sessionRecord.setMode(screenSets.get(ScreenSetHandler.FUNCTION_DATA_SCREEN).getMode());
		sessionRecord.setFunctionCRMData("");
		sessionRecord.setFunctionEFCData("");
		sessionRecord.setFunctionEFC2Data("");
		sessionRecord.setBeforeImage("");

		// NOTE:
		// There are 4 XML fields in WEXPF
		// 1 - The data for the main function
		// 2 - CRM
		// 3 - EFC list details
		// 4 - EFC detail
		//
		// Variation:
		// 1 - The data for the main function
		// 2 - blank
		// 3 - blank
		// 4 - Repeating row - when editing/adding a repeating row
		//
		// Restoring
		// Any changes to saving a transaction will require changes to the restoring of transaction

		// before image defined?
		if (screenSets.get(ScreenSetHandler.FUNCTION_DATA_SCREEN).getFunctionDataBefore() != null)
		{
			sessionRecord.setBeforeImage(screenSets.get(ScreenSetHandler.FUNCTION_DATA_SCREEN).getFunctionDataBefore().cvtToXML());
		}

		// populate the next data if available (CRM)
		if (screenSets.size() > ScreenSetHandler.FUNCTION_CRM_SCREEN
						&& screenSets.get(ScreenSetHandler.FUNCTION_CRM_SCREEN) != null)
		{
			FunctionData fd = screenSets.get(ScreenSetHandler.FUNCTION_CRM_SCREEN).getFunctionData();
			if (fd != null)
			{
				sessionRecord.setFunctionCRMData(fd.cvtToXML());
			}
		}

		// populate the next data if available (EFC 1)
		if (screenSets.size() > ScreenSetHandler.FUNCTION_EFC_SCREEN_1
						&& screenSets.get(ScreenSetHandler.FUNCTION_EFC_SCREEN_1) != null)
		{
			FunctionData fd = screenSets.get(ScreenSetHandler.FUNCTION_EFC_SCREEN_1).getFunctionData();
			if (fd != null)
			{
				sessionRecord.setFunctionEFCData(fd.cvtToXML());
			}
		}

		// populate the next data if available (EFC 2)
		if (screenSets.size() > ScreenSetHandler.FUNCTION_EFC_SCREEN_2
						&& screenSets.get(ScreenSetHandler.FUNCTION_EFC_SCREEN_2) != null)
		{
			FunctionData fd = screenSets.get(ScreenSetHandler.FUNCTION_EFC_SCREEN_2).getFunctionData();
			if (fd != null)
			{
				sessionRecord.setFunctionEFC2Data(fd.cvtToXML());
			}
		}

		// special processing if the last screenset is a repeating field
		// this will set the EFC data to blank (since no EFC yet) and then set EFC2 to be the repeating field screen
		ScreenSet screenSet = screenSets.get(screenSets.size() - 1);
		if (screenSet instanceof ScreenSetRepeatFields)
		{
			sessionRecord.setFunctionCRMData("");
			sessionRecord.setFunctionEFCData("");
			sessionRecord.setFunctionEFC2Data(screenSet.getFunctionData().cvtToXML());
		}

		// messages
		sessionRecord.setFunctionMessages(functionMsgManager.getFunctionMessages().cvtToXML());
		sessionRecord.setWarningMessages(functionMsgManager.getOverWarnMessages().cvtToXML());

		// screen set
		int curScreenSet = screenSetHandler.getCurScreenSet();
		int lastScreenSet = screenSetHandler.getLastScreenSetViewed();
		if (lastScreenSet < curScreenSet)
		{
			lastScreenSet = curScreenSet;
		}

		// setup the WE record
		WERecordDataModel weRecord = new WERecordDataModel(optionId, sessionId, transactionId, userId, "", "", screenSetHandler
						.rtvScrnSetCurrent().getScrnNo() + 1, curScreenSet, lastScreenSet);

		weRecord.setAuthStat(authStatus);
		weRecord.setAuthLevel(authLevel);
		weRecord.setAuthorisor(supervisorId);
		weRecord.setUserAlerted("N");
		weRecord.setOptionTitle(screenSetHandler.rtvScreenSetMain().getFunction().getLabel());
		weRecord.setMessageAmounts(functionMsgManager.getFunctionMessages().rtvAmounts());
		weRecord.setMessageBranches(functionMsgManager.getFunctionMessages().rtvBranches());

		// load messages
		int index = 0;
		for (FunctionMessage fm : functionMsgManager.getFunctionMessages().getMessages())
		{
			weRecord.setMessage(fm.getEqMessage().getDsepms37(), index);

			// only the first 20
			index++;
			if (index >= 20)
			{
				break;
			}
		}

		if (offline)
		{
			weRecord.setOfflineRequest("Y");
		}
		else
		{
			weRecord.setOfflineRequest("N");
		}

		Calendar cal = Calendar.getInstance();
		weRecord.setTranTime(Toolbox.getTimeDBFormat(cal));
		weRecord.setTranDate(Toolbox.getDateDBFormat(cal));

		// before images
		saveBeforeImage(session, screenSetHandler.rtvScreenSetMain());

		// save
		save(session, commit, sessionRecord, weRecord);
	}

	/**
	 * Save the before image
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param screenSet
	 *            - the screen set containing the load API
	 */
	public void saveBeforeImage(EquationStandardSession session, ScreenSet screenSet)
	{
		// remove before image
		IWEYRecordDao weyDaoDelete = daoFactory.getWEYDao(session, new WEYRecordDataModel());
		weyDaoDelete.deleteRecordByTransaction(sessionId, userId, transactionId, optionId);

		// save before image
		if (screenSet.getBeforeImagesTransactions() != null)
		{
			IWEYRecordDao weyDao = daoFactory.getWEYDao(session, new WEYRecordDataModel());
			Map<String, IEquationStandardObject> transactions = screenSet.getBeforeImagesTransactions().getEquationTransactions();

			for (int i = 0; i < screenSet.getFunction().getInputFieldSets().size(); i++)
			{
				List<APIFieldSet> loadAPIs = screenSet.getFunction().getInputFieldSets().get(i).getLoadAPIs();
				for (int j = 0; j < loadAPIs.size(); j++)
				{
					String loadId = loadAPIs.get(j).getId();
					IEquationStandardObject transaction = transactions.get(loadId);
					if (transaction != null && transaction.getValid())
					{
						// get the GS offset
						int offset = 0;
						if (transaction instanceof EquationStandardTransaction)
						{
							offset = ((EquationStandardTransaction) transaction).getGsOffset();
						}

						// get the data
						byte[] data = transaction.getBytes();
						if (data == null)
						{
							data = new byte[1];
						}

						// TODO: save all details for list????

						WEYRecordDataModel weyRecord = new WEYRecordDataModel(optionId, sessionId, transactionId, userId, loadId,
										loadAPIs.get(j).getType(), offset, data, "");
						weyDao.insertRecord(weyRecord);
					}
				}
			}
		}
	}

	/**
	 * Update a session to the database
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * @param authStat
	 *            - the authorisation status
	 * @param authLevel
	 *            - the authorisation level
	 * @param reason
	 *            - the reason
	 * @param alert
	 *            - the user alert flag
	 * 
	 * @return true - if the session has been updated <br>
	 *         false - if the session does not exist
	 * 
	 * @throws EQException
	 */
	public boolean update(EquationStandardSession session, boolean commit, String authStat, String authLevel, String reason,
					String alert) throws EQException
	{
		// initialise
		boolean found = false;
		IWERecordDao weDao = null;

		try
		{
			// create the session record
			WERecordDataModel weRecord = rtvWERecordKey();
			weDao = daoFactory.getWEDao(session, weRecord);

			weRecord = weDao.getWERecord();
			if (weRecord != null)
			{
				// update the status
				if (authStat != null)
				{
					weRecord.setAuthStat(authStat);
				}

				if (authLevel != null)
				{
					weRecord.setAuthLevel(authLevel);
				}

				if (reason != null)
				{
					weRecord.setReasonRejection(Toolbox.convertTextIntoAS400TextCCSID(reason, 100, session.getCcsid(),
									BidiStringType.DEFAULT));
				}

				if (alert != null)
				{
					weRecord.setUserAlerted(alert);
				}
				// update and commit
				weDao.insertOrUpdateRecord(weRecord);
				if (commit)
				{
					session.connectionCommit();
				}

				// found
				found = true;
			}
		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: update() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: update() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// record found?
		return found;
	}

	/**
	 * Restore a session from the database
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * @param authStat
	 *            - new status once successfully restored
	 * @param alert
	 *            - the user alert flag
	 * 
	 * @return true - if restore is successful
	 * 
	 * @throws EQException
	 */
	public boolean restore(EquationStandardSession session, boolean commit, String authStat, String alert) throws EQException
	{
		// initialise
		SessionRecordDataModel sessionRecord = null;
		ISessionRecordDao dao = null;
		IWERecordDao weDao = null;
		boolean found = false;

		try
		{
			// create the session record
			sessionRecord = rtvSessionRecordKey();
			dao = daoFactory.getSessionDao(session, sessionRecord);
			sessionRecord = dao.getSessionRecord();

			if (sessionRecord != null)
			{
				WERecordDataModel weRecord = rtvWERecordKey();
				weDao = daoFactory.getWEDao(session, weRecord);
				weRecord = weDao.getWERecord();

				// save the original status
				statusOriginal = weRecord.getAuthStat();

				// update the status
				if (authStat != null && !weRecord.getAuthStat().equals(WERecordDataModel.STAT_TMPLT)
								&& !weRecord.getAuthStat().equals(WERecordDataModel.MAKER_CHECKER_STAT_REJCTD)
								&& !weRecord.getAuthStat().equals(WERecordDataModel.MAKER_CHECKER_STAT_APPRVD)
								&& !weRecord.getAuthStat().equals(WERecordDataModel.MAKER_CHECKER_STAT_AWAIT))
				{
					weRecord.setAuthStat(authStat);
					weRecord.setUserAlerted(alert);
					weDao.insertOrUpdateRecord(weRecord);

					if (commit)
					{
						session.connectionCommit();
					}
				}

				// session restored
				sessionRestored = true;
				screenSetId = weRecord.getScreenSetId();
				lastScrnSetId = weRecord.getLastScrnSetId();
				scrnNo = weRecord.getScrnNo();
				status = weRecord.getAuthStat();
				authLevel = weRecord.getAuthLevel();
				authorisor = weRecord.getAuthorisor();
				found = true;
			}
		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: restore() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: restore() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// initialise
		functionData = null;
		functionCRMData = null;
		functionEFCData = null;
		functionEFC2Data = null;
		functionMessages = null;
		warningMessages = null;
		beforeImage = null;

		// convert to the appropriate data
		if (found)
		{
			loadMode = sessionRecord.getMode();

			functionData = new FunctionData();
			functionData.loadFieldDataFromXML(sessionRecord.getFunctionData());

			String functionDataBefore = sessionRecord.getBeforeImage();
			if (functionDataBefore.length() > 0)
			{
				beforeImage = new FunctionData();
				beforeImage.loadFieldDataFromXML(functionDataBefore);
			}

			String functionCRMDataString = sessionRecord.getFunctionCRMData();
			if (functionCRMDataString.length() > 0)
			{
				functionCRMData = new FunctionData();
				functionCRMData.loadFieldDataFromXML(functionCRMDataString);
			}

			String functionEFCDataString = sessionRecord.getFunctionEFCData();
			if (functionEFCDataString.length() > 0)
			{
				functionEFCData = new FunctionData();
				functionEFCData.loadFieldDataFromXML(functionEFCDataString);
			}

			String functionEFC2DataString = sessionRecord.getFunctionEFC2Data();
			if (functionEFC2DataString.length() > 0)
			{
				functionEFC2Data = new FunctionData();
				functionEFC2Data.loadFieldDataFromXML(functionEFC2DataString);
			}

			EqBeanFactory eqBeanFactory = EqBeanFactory.getEqBeanFactory();
			functionMessages = (FunctionMessages) eqBeanFactory.deserialiseXMLAsBean(sessionRecord.getFunctionMessages(),
							FunctionMessages.class);
			warningMessages = (FunctionMessages) eqBeanFactory.deserialiseXMLAsBean(sessionRecord.getWarningMessages(),
							FunctionMessages.class);

			if (session.getUnit().hasMakerCheckerEnhancement())
			{
				for (int i = 0; i < functionMessages.getMessages().size(); i++)
				{
					if (functionMessages.getMessages().get(i).getEqMessage().getMessageID().equals(
									MakerCheckerUtility.MAKER_CHECKER_KSM))
					{
						functionMessages.getMessages().remove(i);
					}
				}
			}
		}

		return found;
	}

	/**
	 * Change the session status
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * 
	 * @return true - if the session is successfully reset <br>
	 *         false - if the session does not exist
	 * 
	 * @throws EQException
	 */
	public boolean reset(EquationStandardSession session, boolean commit, String authStat, String alert) throws EQException
	{
		// initialise
		boolean found = false;
		IWERecordDao weDao = null;

		try
		{
			// create the session record
			WERecordDataModel weRecord = rtvWERecordKey();
			weDao = daoFactory.getWEDao(session, weRecord);

			weRecord = weDao.getWERecord();
			if (weRecord != null)
			{
				// update the status
				weRecord.setAuthStat(authStat);
				weRecord.setUserAlerted(alert);

				// update and commit
				weDao.insertOrUpdateRecord(weRecord);
				if (commit)
				{
					session.connectionCommit();
				}

				// session restored
				sessionRestored = true;
				found = true;
			}
		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: reset() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: reset() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// found?
		return found;
	}

	/**
	 * Delete the session
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param commit
	 *            - commit the changes to the database
	 * 
	 * @return true - if the session is successfully deleted <br>
	 *         false - if the session does not exists
	 * 
	 * @throws EQException
	 */
	public boolean delete(EquationStandardSession session, boolean commit) throws EQException
	{
		// initialise
		boolean found = false;

		try
		{
			// remove the session record
			SessionRecordDataModel sessionRecord = rtvSessionRecordKey();
			ISessionRecordDao dao = daoFactory.getSessionDao(session, sessionRecord);
			boolean isSessionfound = dao.checkIfThisSessionRecordIsInTheDB();
			if (isSessionfound)
			{
				dao.deleteRecord();
			}

			// remove the WE record
			WERecordDataModel weRecord = rtvWERecordKey();
			IWERecordDao weDao = daoFactory.getWEDao(session, weRecord);
			boolean found2 = weDao.checkIfThisWERecordIsInTheDB();
			if (found2)
			{
				weDao.deleteRecord(weRecord);
			}

			// remove the WE2 record
			IWE2RecordDao we2Dao = daoFactory.getWE2Dao(session, new WE2RecordDataModel(weRecord.getSessionId(), weRecord
							.getUserId(), weRecord.getOptionId(), weRecord.getTransactionId()));
			if (we2Dao.checkIfThisWE2RecordIsInTheDB())
			{
				we2Dao.deleteRecord();
			}

			// remove the WE2 linked record
			we2Dao.setRecord(new WE2RecordDataModel(weRecord.getSessionId(), weRecord.getUserId(), weRecord.getOptionId(), weRecord
							.getTransactionId(), true));
			we2Dao.deleteWE2LinkedRecord();

			// remove the WEY records
			WEYRecordDataModel weyRecord = rtvWEYRecordKey();
			IWEYRecordDao weyDao = daoFactory.getWEYDao(session, weyRecord);
			weyDao.deleteRecordByTransaction(weyRecord.getSessionId(), weyRecord.getUserId(), weyRecord.getTransactionId(),
							weyRecord.getOptionId());

			// found
			found = isSessionfound || found2;

			if (commit)
			{
				session.connectionCommit();
			}

		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: delete() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: delete() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// found?
		return found;
	}

	/**
	 * Retrieve the session status
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param authStat
	 *            - new status once successfully restored
	 * 
	 * @throws EQException
	 */
	public WERecordDataModel check(EquationStandardSession session) throws EQException
	{
		// initialise
		WERecordDataModel weRecord = null;
		boolean found = false;
		IWERecordDao weDao = null;

		try
		{
			// retrieve the session status
			weRecord = rtvWERecordKey();
			weDao = daoFactory.getWEDao(session, weRecord);
			weRecord = weDao.getWERecord();
			if (weRecord != null)
			{
				found = true;
			}
		}
		catch (Exception e)
		{
			throw new EQException("FunctionSession: check() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// return record
		if (found)
		{
			return weRecord;
		}
		else
		{
			return null;
		}
	}

	/**
	 * Read the before images
	 * 
	 * @param session
	 *            - the Equation standard session
	 * @param screenSetHandler
	 *            - the Screen Set Handler
	 * 
	 * @return the list of transactions
	 * 
	 * @throws EQException
	 */
	public Hashtable<String, IEquationStandardObject> loadBeforeImages(EquationStandardSession session, ScreenSet screenSet)
					throws EQException
	{
		// load before images
		IWEYRecordDao weyDao = daoFactory.getWEYDao(session, new WEYRecordDataModel());
		String whereClause = "WEYSID='" + sessionId + "' " + " and ";
		whereClause += "WEYUID='" + userId + "' " + " and ";
		whereClause += "WEYTID='" + transactionId + "' " + " and ";
		whereClause += "WEYOID='" + optionId + "' ";
		Map<String, ? extends AbsRecord> list = weyDao.getHashtableRecordBy(whereClause);
		Map<String, WEYRecordDataModel> weyRecords = (Map<String, WEYRecordDataModel>) list;

		// list of transactions
		Hashtable<String, IEquationStandardObject> transactions = new Hashtable<String, IEquationStandardObject>();

		// no records
		if (weyRecords == null)
		{
			return transactions;
		}

		// load before images into list of transactions
		Iterator<String> iter = weyRecords.keySet().iterator();
		while (iter.hasNext())
		{
			WEYRecordDataModel weyRecord = weyRecords.get(iter.next());
			APIFieldSet apiFieldSet = screenSet.getMainInputFieldSet().getLoadAPI(weyRecord.getLoadId());

			// initialise the transactions
			IEquationStandardObject transaction = EquationStandardObjectHelper.getTransaction(session, apiFieldSet.getType(),
							apiFieldSet.getId(), apiFieldSet.getLabel(), apiFieldSet.getRoot(), apiFieldSet.getKeyFields(),
							apiFieldSet.getDecode(), apiFieldSet.getNewField());

			// TODO: restore all details for list????
			if (transaction instanceof EquationStandardListTable)
			{
				// TODO: dummy change just to make it NOT dump. this is not final code
				((EquationStandardListTable) transaction).getTableData().addRow();
			}

			transaction.setBytes(weyRecord.getBeforeImage());
			transaction.setValid(true);

			transactions.put(weyRecord.getLoadId(), transaction);
		}
		// return the transactions
		return transactions;
	}

	/**
	 * Remove WE2 records
	 * 
	 * @param session
	 *            - the Equation Standard session
	 * @param sessionId
	 *            - the session id
	 * @param userId
	 *            - the user id
	 * @param optionId
	 *            - the option id
	 * @param transactionId
	 *            - the transaction id
	 */
	public void deleteWE2(EquationStandardSession session, String sessionId, String userId, String optionId, String transactionId)
	{
		// remove the WE2 record
		IWE2RecordDao we2Dao = daoFactory.getWE2Dao(session, new WE2RecordDataModel(sessionId, userId, optionId, transactionId));
		if (we2Dao.checkIfThisWE2RecordIsInTheDB())
		{
			we2Dao.deleteRecord();
		}

		// remove the WE2 linked record
		we2Dao.setRecord(new WE2RecordDataModel(sessionId, userId, optionId, transactionId, true));
		we2Dao.deleteWE2LinkedRecord();
	}

	/**
	 * Remove WE2 records
	 * 
	 * @param session
	 *            - the Equation Standard session
	 * @param commit
	 *            - perform commit?
	 */
	public boolean deleteWE2(EquationStandardSession session, boolean commit) throws EQException
	{
		// initialise
		boolean found = false;

		try
		{
			deleteWE2(session, sessionId, userId, optionId, transactionId);

			if (commit)
			{
				session.connectionCommit();
			}

		}
		catch (Exception e)
		{
			try
			{
				if (commit)
				{
					session.connectionRollback();
				}
			}
			catch (Exception e2)
			{
				throw new EQException("FunctionSession: delete() Failed: " + Toolbox.getExceptionMessage(e2), e2);
			}
			throw new EQException("FunctionSession: delete() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		// found?
		return found;
	}

	/**
	 * Validates if the WE status is pending
	 * 
	 * @return true if pending status, false if otherwise
	 * 
	 * @throws EQException
	 */
	public boolean validatePendingStatus(EquationStandardSession session) throws EQException
	{
		WERecordDataModel weRecord = null;
		boolean isPending = false;
		IWERecordDao weDao = null;
		String status = "";

		try
		{
			weRecord = rtvWERecordKey();
			weDao = daoFactory.getWEDao(session, weRecord);
			weRecord = weDao.getWERecord();

			if (weRecord != null)
			{
				status = weRecord.getAuthStat();
				if (!status.equals(WERecordDataModel.STAT_AUTH) && !status.equals(WERecordDataModel.STAT_DECL)
								&& !status.equals(WERecordDataModel.MAKER_CHECKER_STAT_APPRVD)
								&& !status.equals(WERecordDataModel.MAKER_CHECKER_STAT_REJCTD))
				{
					isPending = true;
				}
			}
		}
		catch (Exception e)
		{
			throw new EQException("FunctionSession: validatePendingStatus() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		return isPending;
	}

	/**
	 * Validates if the WE status is cancelled
	 * 
	 * @return true if cancelled status, false if otherwise
	 * 
	 * @throws EQException
	 */
	public boolean validateCancelledStatus(EquationStandardSession session) throws EQException
	{
		WERecordDataModel weRecord = null;
		boolean isCancelled = false;
		IWERecordDao weDao = null;
		String status = "";

		try
		{
			weRecord = rtvWERecordKey();
			weDao = daoFactory.getWEDao(session, weRecord);
			weRecord = weDao.getWERecord();

			if (weRecord != null)
			{
				status = weRecord.getAuthStat();
				if (status.equals(WERecordDataModel.MAKER_CHECKER_STAT_CANCLD))
				{
					isCancelled = true;
				}
			}
		}
		catch (Exception e)
		{
			throw new EQException("FunctionSession: validateCancelledStatus() Failed: " + Toolbox.getExceptionMessage(e), e);
		}

		return isCancelled;
	}

	/**
	 * Return the referral pattern
	 * 
	 * @return - the referral pattern
	 */
	public String getReferralPattern()
	{
		return referralPattern;
	}

	/**
	 * Set the referral pattern
	 * 
	 * @param referralPattern
	 *            - the referral pattern
	 */
	public void setReferralPattern(String referralPattern)
	{
		this.referralPattern = referralPattern;
	}

	/**
	 * Returns true if transaction is to be resubmitted
	 * 
	 * @return true if resubmit transaction
	 */
	public boolean isResubmitted()
	{
		return resubmitted;
	}

	/**
	 * Sets whether transaction is to be resubmitted
	 * 
	 * @param resubmitted
	 *            - a boolean
	 */
	public void setResubmitted(boolean resubmitted)
	{
		this.resubmitted = resubmitted;
	}

	/**
	 * Read WE Record
	 * 
	 * @param session
	 *            - the Equation standard session
	 * 
	 * @return true - if record read
	 * 
	 * @throws EQException
	 */
	public boolean readWE(EquationStandardSession session) throws EQException
	{
		WERecordDataModel weRecord = rtvWERecordKey();
		IWERecordDao weDao = daoFactory.getWEDao(session, weRecord);
		weRecord = weDao.getWERecord();

		if (weRecord == null)
		{
			return false;
		}

		// save the original status
		statusOriginal = weRecord.getAuthStat();

		// read details
		screenSetId = weRecord.getScreenSetId();
		lastScrnSetId = weRecord.getLastScrnSetId();
		scrnNo = weRecord.getScrnNo();
		status = weRecord.getAuthStat();
		authLevel = weRecord.getAuthLevel();
		authorisor = weRecord.getAuthorisor();
		return true;
	}

}