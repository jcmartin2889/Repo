package com.misys.equation.function.beans;

import java.util.ArrayList;
import java.util.List;

import com.misys.equation.function.beans.valid.IValidation;
import com.misys.equation.function.beans.valid.MessageContainer;

/**
 * This class represents a validation user exit
 * 
 */
public class UserExit implements IValidation
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	/** Name of the RPG validation program (e.g. G01AVR) */
	private String programName;

	/** Java package name */
	private String packageName = "";
	
	/** Version of plug-in used to create the service */
	private String pluginVersion = "";

	/** Release version of the patch/enhancement of the service */
	private String releaseVersion = "";

	/** Collection of inclusion filters (combination of screen number and validation mode) */
	private List<ValidationUserExitFilter> userExitFilters = new ArrayList<ValidationUserExitFilter>();

	/**
	 * Construct a new empty user exit
	 */
	public UserExit()
	{
		super();
	}

	/**
	 * Construct a new user exit given the program name
	 * 
	 * @param programName
	 *            - program name
	 */
	public UserExit(String programName)
	{
		this.programName = programName;
	}

	/**
	 * Return the program name
	 * 
	 * @return the program name
	 */
	public String getProgramName()
	{
		return programName;
	}

	/**
	 * Set the program name
	 * 
	 * @param programName
	 *            - program name
	 */
	public void setProgramName(String programName)
	{
		this.programName = programName;
	}

	/**
	 * Add a user exit filter. If a duplicate already exists, then the add will fail without throwing an exception
	 * 
	 * @param userExitFilter
	 *            - user exit filter to be added
	 */
	public void addUserExitFilter(ValidationUserExitFilter userExitFilter)
	{
		boolean exists = false;
		for (ValidationUserExitFilter filter : userExitFilters)
		{
			if (filter.getScreen() == userExitFilter.getScreen() && filter.getMode().equals(userExitFilter.getMode()))
			{
				exists = true;
				break;
			}
		}
		if (!exists)
		{
			this.userExitFilters.add(userExitFilter);
		}
	}

	/**
	 * Remove a user exit filter
	 * 
	 * @param filter
	 *            - user exit filter to be removed
	 */
	public void removeUserExitFilter(ValidationUserExitFilter filter)
	{
		if (this.userExitFilters.contains(filter))
		{
			this.userExitFilters.remove(filter);
		}
	}

	/**
	 * Returns the user exit filters
	 * 
	 * @return the user exit filters
	 */
	public List<ValidationUserExitFilter> getUserExitFilters()
	{
		return userExitFilters;
	}

	/**
	 * Set the user exit filters
	 * 
	 * @param userExitFilters
	 *            - the user exit filters
	 */
	public void setUserExitFilters(List<ValidationUserExitFilter> userExitFilters)
	{
		this.userExitFilters = userExitFilters;
	}

	/**
	 * Sorts the current collection of UserExitFilter objects.
	 * <p>
	 * This is a simple bubble sort implementation, which should be adequate considering the limited number of elements.
	 * <p>
	 * This is called prior to deployment, so that this collection can be easily compared against the existing records.
	 */
	public void sort()
	{
		boolean swapped; // Has a swap occurred this pass?
		do
		{
			swapped = false;
			for (int index = 0; index < userExitFilters.size() - 1; index++)
			{
				ValidationUserExitFilter current = userExitFilters.get(index);
				ValidationUserExitFilter next = userExitFilters.get(index + 1);
				if (current.getScreen() > next.getScreen()
								|| (current.getScreen() == next.getScreen() && current.getMode().compareTo(next.getMode()) > 0))
				{
					// Swap
					userExitFilters.set(index, next);
					userExitFilters.set(index + 1, current);
					swapped = true;
				}
			}
			// Keep looping until no more swaps occurred
		}
		while (swapped);
	}

	/**
	 * @return the packageName
	 */
	public String getPackageName()
	{
		// TODO: Remove this temporary defaulting
		if (packageName == null)
		{
			packageName = "com.misys.equation.userexits";
		}
		return packageName;
	}

	/**
	 * @param packageName
	 *            the packageName to set
	 */
	public void setPackageName(String packageName)
	{
		this.packageName = packageName;
	}

	/**
	 * Validate the user exit definition
	 * <p>
	 * There is relatively little validation required for a user exit definition as the processing is performed in the Java code.
	 * <p>
	 * 
	 * @param messageContainer
	 *            A MessageContainer to add messages to
	 * @param subSet
	 *            A String specifying a subset of validation processing to perform
	 * @param includeChildren
	 *            whether to validate the whole 'tree'. This parameter is not relevant to UserExit validation
	 * 
	 * @return boolean (currently unused)
	 */
	public boolean validateBean(MessageContainer messageContainer, String subSet, boolean includeChildren)
	{
		// If there are no filters, then the Java will never be called, so the definition is incomplete:
		if (this.userExitFilters.isEmpty())
		{
			messageContainer.addErrorMessageId("Language.NoFiltersSpecified", null); //$NON-NLS-1$
		}
		return false;
	}
	
	/**
	 * Gets the plug-in version
	 * 
	 * @return The version of plug-in used to create the service
	 */
	public String getPluginVersion() {
		return pluginVersion;
	}

	/**
	 * Sets the plug-in version
	 * 
	 * @param pluginVersion
	 * 			- the version of plug-in used to create the service 
	 */
	public void setPluginVersion(String pluginVersion) {
		this.pluginVersion = pluginVersion;
	}

	/**
	 * Gets the release version
	 * 
	 * @return The patch/enhancement used to despatch/install the service
	 */
	public String getReleaseVersion() {
		return releaseVersion;
	}

	/**
	 * Sets the release version
	 * 
	 * @param releaseVersion
	 * 			The patch/enhancement used to despatch/install the service
	 */
	public void setReleaseVersion(String releaseVersion) {
		this.releaseVersion = releaseVersion;
	}
}
