package com.misys.equation.common.globalprocessing.calculators;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.Map.Entry;

import com.misys.equation.common.consolidation.C8DaoConsolidator;
import com.misys.equation.common.consolidation.GFEDaoConsolidator;
import com.misys.equation.common.dao.beans.GFETotalPerDateDataModel;
import com.misys.equation.common.dao.beans.GPMRecordDataManager;
import com.misys.equation.common.dates.EquationCalendar;
import com.misys.equation.common.globalprocessing.systemoptions.GlobalSystemOptions;
import com.misys.equation.common.internal.eapi.core.EQException;
import com.misys.equation.common.utilities.EquationLogger;
import com.misys.equation.common.utilities.Toolbox;

/**
 * Provides the functionality to enquire on projected nostro account balance totals for each currency for all linked units and
 * branches.
 * 
 * @author camillen
 */
public final class GlobalFXCurrencyPositionsEnquiry extends AbstractGlobalProcessingEnquiry
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	/** Logger instance */
	private static final EquationLogger LOG = new EquationLogger(GlobalFXCurrencyPositionsEnquiry.class);

	// Specific properties for this enquiry
	private String[] currencyDispayOrder;
	private int noOfDays;

	private String lastOvernightDate;
	private String lastProcessingDate;
	private String maxDate;
	private GFEDaoConsolidator daoConsolidator;
	private C8DaoConsolidator c8Consolidator;

	/**
	 * GlobalCashPositionsEnquiry constructor. This class instantiates the calculator by loading the required data from the database
	 * and
	 * 
	 * @param sessions
	 */
	public GlobalFXCurrencyPositionsEnquiry(final String sessionIdentifier)
	{
		// Call the initialisation method
		super(sessionIdentifier);
		init(sessionIdentifier);

		try
		{
			daoConsolidator = new GFEDaoConsolidator(session);
			c8Consolidator = new C8DaoConsolidator(session);
		}
		catch (EQException e)
		{
			LOG.error(e);
		}
	}

	/**
	 * This method initialises the Enquiry class by retrieving required data for the calculations such as LOD, max date, etc.
	 * 
	 * @param String
	 *            sessionIdentifier
	 */
	@Override
	protected void init(final String sessionIdentifier)
	{
		super.init(sessionIdentifier);
		// Do any additional initialisations here

		// Get the last overnight date ...
		lastOvernightDate = Toolbox.padAtFront(EquationCalendar.getLatestOvernightDateString(sessions), "0", 7);
		lastProcessingDate = Toolbox.padAtFront(EquationCalendar.getLatestProcessingDateString(sessions), "0", 7);

		// Set the number of days and start and end dates
		calculateDays();

		// Build ordered list of currencies
		currencyDispayOrder = createCurrencyDisplayOrder();
	}

	private Map<String, Long> calculateDays()
	{
		GregorianCalendar now = Toolbox.parseEqDate(lastProcessingDate);
		Map<String, Long> calculatedDaysAndAmounts = new TreeMap<String, Long>();

		defineNumberOfDays();

		calculatedDaysAndAmounts.put(Toolbox.getDateDBStringFormat(now), 0L);

		for (int index = 1; index < noOfDays; index++)
		{
			now.add(Calendar.DATE, 1);
			calculatedDaysAndAmounts.put(Toolbox.getDateDBStringFormat(now), 0L);
		}

		setEndDay(now);

		return calculatedDaysAndAmounts;
	}

	/**
	 * This method will define the number of days to be displayed. It will be done base on system options.
	 */
	private void defineNumberOfDays()
	{
		GlobalSystemOptions currentGlobalSystemOptions = new GlobalSystemOptions(session);

		GPMRecordDataManager gPMRecordDataManager = currentGlobalSystemOptions.getSystemOptionValue("GP_DISPLAY_NO_DAYS_GLB_GFE");
		noOfDays = gPMRecordDataManager.getSystemOptionIntegerValue().intValue();
	}

	/**
	 * This method will set the current day from the unit in data base format.
	 */
	private void setEndDay(Calendar dbDate)
	{
		maxDate = Toolbox.getDateDBStringFormat(dbDate);
	}

	/**
	 * This method retrieves the global CSV ordered list of currencies. It the continues to query the C801LF on each unit to
	 * determine the rest of the currencies which are not defined in the global system. Such currencies will be appended to the end
	 * such that they are shown towards the end of the GCE screen.
	 * 
	 * @return String[] - Ordered list of currencies
	 */
	private String[] createCurrencyDisplayOrder()
	{
		try
		{
			c8Consolidator = new C8DaoConsolidator(session);
		}
		catch (EQException e)
		{
			LOG.error(e);
		}

		// Load the priority currencies from the global repository
		Set<String> priorityCurrencies = new LinkedHashSet<String>();
		GlobalSystemOptions currentGlobalSystemOptions = new GlobalSystemOptions(session);

		GPMRecordDataManager gPMRecordDataManager = currentGlobalSystemOptions
						.getSystemOptionValue("GP_DISPLAY_CCY_ORDER_IN_GLB_GFE");
		List<String> firstCurrencies = gPMRecordDataManager.getSystemOptionStringArrayListValue();

		priorityCurrencies.addAll(firstCurrencies);

		Set<Entry<String, String>> mapEntrys = c8Consolidator.getC8CurrencyMnemonicsWithMPM().entrySet();

		for (Entry<String, String> ccy : mapEntrys)
		{
			priorityCurrencies.add(ccy.getValue());
		}

		return priorityCurrencies.toArray(new String[priorityCurrencies.size()]);
	}

	/**
	 * This is the main method which returns the result to be displayed in the enquiry screen. The result is stored in a two
	 * dimensional array which represents the various currencies and their corresponding position per day.
	 * 
	 * @return Long[][] results - two dimensional array which represents the currencies and position
	 */
	private Map<String, GFETotalPerDateDataModel> calculateGlobalFXCurrencyPositions()
	{
		Map<String, Long> calculatedDaysAndAmounts = null;

		// Step 1: get the overnight and net forward positions
		List<Map<String, Object>> overnightPositions = daoConsolidator.getFXCurrencyOvernightPositions();

		// Step 2: Get all positional postings up to the latest Pdate across unit
		List<Map<String, Object>> positionToday = daoConsolidator.getFXCurrencyPositionsForToday(lastProcessingDate);

		// Step 3: Get all days positions for specified number of days
		List<Map<String, Object>> dailyPositions = daoConsolidator.getFXCurrencyPositionsByDate(lastProcessingDate, maxDate);

		// Create the two dimensional array using the list of currencies and no of days to pre-determine the size
		Map<String, GFETotalPerDateDataModel> positions = new LinkedHashMap<String, GFETotalPerDateDataModel>();

		// For each currency we can now loop and calculate the positions per day. This is done firstly be calculating the
		// overnight balance and subsequently by using this overnight balance to calculate the position.
		for (String element : currencyDispayOrder)
		{
			positions.put(element, new GFETotalPerDateDataModel(element, calculateDays()));
		}

		// Save the Overnight and Net Forward Positions for each currency
		for (Map<String, Object> currentOvernightPosition : overnightPositions)
		{
			String currency = (String) currentOvernightPosition.get("OKCCY");
			long overnightPosition = Long.parseLong(((BigDecimal) currentOvernightPosition.get("OKOVRN")).toString());
			long netForwardPosition = Long.parseLong(((BigDecimal) currentOvernightPosition.get("OKNET")).toString());

			GFETotalPerDateDataModel currentCurrency = positions.get(currency);
			if ((currentCurrency.getCurrency() == null) || (currentCurrency.getCurrency() == ""))
			{
				currentCurrency.setCurrency(currency);
			}

			currentCurrency.setOvernightPosition(currentCurrency.getOvernightPosition() + overnightPosition);
			currentCurrency.setNetForwardPosition(currentCurrency.getNetForwardPosition() + netForwardPosition);
		}

		// Save the Net Position to Yesterday for each currency
		for (Map<String, Object> currentPositionToday : positionToday)
		{
			String currency = (String) currentPositionToday.get("OICCY");
			long netPositionToYesterday = Long.parseLong(((BigDecimal) currentPositionToday.get("OINET")).toString());

			GFETotalPerDateDataModel currentCurrency = positions.get(currency);
			if ((currentCurrency.getCurrency() == "") || (currentCurrency.getCurrency() == null))
			{
				currentCurrency.setCurrency(currency);
			}

			currentCurrency.setNetPositionToYesterday(currentCurrency.getNetPositionToYesterday() + netPositionToYesterday);
		}

		// Save the Net Daily Position for each currency
		for (Map<String, Object> currentDailyPosition : dailyPositions)
		{
			String currency = (String) currentDailyPosition.get("OICCY");
			String dailyDate = Toolbox.padAtFront(((BigDecimal) currentDailyPosition.get("OIDTE")).toString(), "0", 7);
			long netDailyAmt = Long.parseLong(((BigDecimal) currentDailyPosition.get("OINET")).toString());

			GFETotalPerDateDataModel currentCurrency = positions.get(currency);
			if ((currentCurrency.getCurrency() == "") || (currentCurrency.getCurrency() == null))
			{
				currentCurrency.setCurrency(currency);
			}

			calculatedDaysAndAmounts = currentCurrency.getNetDailyPositions();

			// Add the daily amount to the dated column
			Long dailyAmount = calculatedDaysAndAmounts.get(dailyDate);

			long calculated = dailyAmount.longValue() + netDailyAmt;
			Long calculatedValue = Long.valueOf(calculated);

			calculatedDaysAndAmounts.remove(dailyDate);
			calculatedDaysAndAmounts.put(dailyDate, calculatedValue);
		}

		// Now process each currency and ...
		// - add Overnight Position and Net Position to Yesterday to todays position
		// - accumulate Net Position to Date
		// - calculate Open Position
		// - calculate Forward Position
		for (GFETotalPerDateDataModel position : positions.values())
		{
			Map<String, Long> daysDatesAndAmounts = position.getNetDailyPositions();
			boolean firstDay = true;

			for (Map.Entry<String, Long> entry : daysDatesAndAmounts.entrySet())
			{
				if (firstDay)
				{
					entry.setValue(entry.getValue() + position.getOvernightPosition() + position.getNetPositionToYesterday());
					firstDay = false;
				}

				position.setNetPositionToDate(position.getNetPositionToDate() + entry.getValue());
			}

			position.setOpenPosition(position.getNetForwardPosition() + position.getOvernightPosition()
							+ position.getNetPositionToYesterday());
			position.setForwardPosition(position.getOpenPosition() - position.getNetPositionToDate());
		}

		// Finally we return the positions array to be displayed on the screen
		return positions;
	}

	@Override
	public GlobalFXCurrencyPositionsResult calculate()
	{
		Map<String, GFETotalPerDateDataModel> positions = calculateGlobalFXCurrencyPositions();
		return new GlobalFXCurrencyPositionsResult(positions.values());
	}

	public String[] getCurrencyDispayOrder()
	{
		return currencyDispayOrder;
	}

	/**
	 * This method returns the latest date visible in the enquiry. This is LOD date + MAX_DAYS
	 * 
	 * @return the latest date visible in the enquiry
	 */
	public String getMaxDate()
	{
		return maxDate;
	}

	public int getNoOfDays()
	{
		return noOfDays;
	}

	public String getLastOvernightDate()
	{
		return lastOvernightDate;
	}

	public String getLastProcessingDate()
	{
		return lastProcessingDate;
	}

	@Override
	public AbstractGPEnquiryResult calculate(String... params) throws EQException
	{
		throw new EQException("method not supported");
	}
}
