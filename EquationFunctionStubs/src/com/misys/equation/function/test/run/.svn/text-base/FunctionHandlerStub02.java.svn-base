package com.misys.equation.function.test.run;

import com.misys.equation.common.files.JournalHeader;
import com.misys.equation.common.utilities.Toolbox;
import com.misys.equation.function.beans.FunctionData;
import com.misys.equation.function.runtime.FunctionHandler;
import com.misys.equation.function.runtime.FunctionInfo;
import com.misys.equation.function.runtime.FunctionMessages;

/**
 * FunctionHandler Stub 2
 * 
 * This is how to use the Function Handler validation each screen separately
 * 
 */
public class FunctionHandlerStub02 extends FunctionHandlerStubTestCase
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	public FunctionHandlerStub02()
	{
		try
		{
			setUp();
		}
		catch (Exception e)
		{
			System.out.println(e);
			e.printStackTrace();
		}
	}

	public static void main(String[] inputParameters)
	{
		FunctionHandlerStub02 test = new FunctionHandlerStub02();
		test.test();
	}

	public boolean test()
	{
		// Have a bash...
		FunctionHandler functionHandler = null;
		try
		{
			// Create the function handler
			FunctionInfo functionInfo = new FunctionInfo("SESSIONID", "");
			functionInfo.setWorkStationId("XYZA");
			functionHandler = new FunctionHandler(user, functionInfo);

			functionHandler.process("ALZ", "", null, null);

			// Setup the function data
			FunctionData functionData = functionHandler.getFhd().getScreenSetHandler().rtvScrnSetCurrent().getFunctionData();
			functionData.chgFieldInputValue("AB", "9132");
			functionData.chgFieldInputValue("AN", "234567");
			functionData.chgFieldInputValue("AS", "001");
			functionData.chgFieldInputValue("EAN", "1840KBWD870900840");
			functionData.chgFieldInputValue("TCD", "510");
			functionData.chgFieldInputValue("AMT", "20T");
			functionData.chgFieldInputValue("CCY", "GBP");
			functionData.chgFieldInputValue("BRNM", "LOND");
			functionData.chgFieldInputValue("DRF", "via STUB2");
			functionData.chgFieldInputValue("NR1", "ytest NR1");
			functionData.chgFieldInputValue("NR2", "ztest NR2");
			functionData.chgFieldInputValue("NR3", "Atest NR3");
			functionData.chgFieldInputValue("NR4", "ytest NR4");
			functionData.chgFieldInputValue("SRC", "aR");
			functionData.chgFieldInputValue("UC1", "cC1");
			functionData.chgFieldInputValue("UC2", "dC2");

			functionData.chgFieldInputValue("DIGIT", "15");
			functionData.chgFieldInputValue("DECI", "0");
			functionData.chgFieldInputValue("XValid2", "110");
			functionData.chgFieldInputValue("XValid3", "170");
			functionData.chgFieldInputValue("XReg", "REGULAR 2");
			functionData.chgFieldInputValue("XMask", "02033205082");
			functionData.chgFieldInputValue("FLD3B", "0991231CITY@@CH 0000001");
			functionData.chgFieldInputValue("FLD3C", "BBB9132120005100  0991231KBSL@@MM 0000080");

			// setup the database values
			functionData.chgFieldDbValue("PBR", "STB2");
			functionData.chgFieldDbValue("NPE", "1");
			functionData.chgFieldDbValue("AC", "0000000001001");
			functionData.chgFieldDbValue("FRQ", "V01");
			functionData.chgFieldDbValue("YNO", "Y");
			functionData.chgFieldDbValue("YNO2", "N");
			functionData.chgFieldDbValue("RAT", "12345");
			functionData.chgFieldDbValue("RAT1", "123.45");
			functionData.chgFieldDbValue("RAT2", "9999.1234567");
			functionData.chgFieldDbValue("VFR", "1000501");

			// get equation session
			functionHandler.rtvEquationSession();

			// validate it per screen
			System.err.println("=============================== VALIDATE");
			int msgSev = FunctionMessages.MSG_NONE;
			boolean morescreen = true;
			while (morescreen)
			{
				// Display the screen
				System.err.println("Displaying screen #"
								+ (functionHandler.getFhd().getScreenSetHandler().rtvScrnSetCurrent().getScrnNo() + 1));
				// System.out.println(functionHandler.getScrnHTML());

				// Load the input fields into the function data
				// functionData.loadFieldDataFromMap(map, true);
				// functionData.loadFieldDataFromMap2(map, true);

				// Validate the screen
				System.err.println("Validating screen #"
								+ (functionHandler.getFhd().getScreenSetHandler().rtvScrnSetCurrent().getScrnNo() + 1));
				// msgSev = functionHandler.validate(functionHandler.getScreenSetHandler().rtvScrnSetScrnNo());
				msgSev = functionHandler.validate();
				if (true)
				{
					break;
				}

				// Any message during validation
				if (msgSev != FunctionMessages.MSG_NONE)
				{
					System.out.println("Messages during validation: START");
					FunctionToolboxStub.printMessages(functionHandler.rtvFunctionMessages().getMessages());
					System.out.println("Messages during validation: END");
				}

				// Determine whether to display the next screen or previous screen or same screen
				// In this example, proceed to next screen
				morescreen = functionHandler.getFhd().getScreenSetHandler().rtvScrnSetCurrent().nextScreen();

			}

			// print the field values
			// System.err.println("Function Data");
			// EqBeanFactory eqBeanFactory = EqBeanFactory.getEqBeanFactory();
			// String xml = eqBeanFactory.serialiseBeanAsXML(functionData);
			// System.out.println(xml);

			// no major error
			System.err.println("");
			System.err.println("=============================== UPDATE");
			if (msgSev != FunctionMessages.MSG_ERROR)
			{
				functionHandler.update(true);
				System.out.println("Messages during update: START");
				FunctionToolboxStub.printMessages(functionHandler.rtvFunctionMessages().getMessages());
				System.out.println("Messages during update: END");
			}
			else
			{
				System.err.println("no update - error exists");
			}

			// Print the transaction
			Toolbox.printList(functionHandler.print());

			// Print the journal key
			JournalHeader journalHeader = functionHandler.getFhd().getJournalHeader();
			if (journalHeader != null)
			{
				System.out.println(journalHeader);
			}

			return (journalHeader != null);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			return false;
		}
		finally
		{
			cleanUp();
		}
	}

	public void testStub02_001()
	{
		FunctionHandlerStub02 stub = new FunctionHandlerStub02();
		boolean success = stub.test();
		assertEquals(true, success);

	}
}
