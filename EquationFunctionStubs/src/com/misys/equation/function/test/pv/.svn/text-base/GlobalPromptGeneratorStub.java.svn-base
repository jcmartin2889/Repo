package com.misys.equation.function.test.pv;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import com.misys.equation.common.access.EquationStandardSession;
import com.misys.equation.common.internal.eapi.core.EQException;
import com.misys.equation.common.test.TestEnvironment;
import com.misys.equation.function.beans.DisplayAttributes;
import com.misys.equation.function.beans.DisplayAttributesSet;
import com.misys.equation.function.beans.FieldData;
import com.misys.equation.function.beans.FunctionData;
import com.misys.equation.function.beans.InputField;
import com.misys.equation.function.beans.InputFieldSet;
import com.misys.equation.function.test.helper.DisplayFieldSetWrapper;
import com.misys.equation.function.test.helper.FunctionGenerator;
import com.misys.equation.function.tools.FunctionToolbox;
import com.misys.equation.function.tools.GlobalPromptGenerator;
import com.misys.equation.function.tools.MappingToolbox;

public class GlobalPromptGeneratorStub
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	private EquationStandardSession session;

	public GlobalPromptGeneratorStub()
	{
		try
		{
			TestEnvironment te = TestEnvironment.getTestEnvironment();
			session = te.getStandardSession();

			FileWriter fw = new FileWriter(new File(
							"C:/docume~1/MacdonP1/CleanHead/EquationDesktop/WebContent/equation/scripts/globalPVs.js"));
			fw.append("//-----------------------------------------------------------------------------------------------------\n");
			fw.append("//This file is automatically generated from - GlobalPromptGeneratorStub.java - do not change manually!!\n");
			fw.append("//-----------------------------------------------------------------------------------------------------\n");

			System.out.println("Creating CUSN Script: ");
			fw.append(generateJSMethodStart("callCusnPrompt") + "\n");
			fw.append("    " + generateCusn(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating CUSM Script: ");
			fw.append(generateJSMethodStart("callCusmPrompt") + "\n");
			fw.append("    " + generateCusm(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating ACNTA Script: ");
			fw.append(generateJSMethodStart("callAcntaPrompt") + "\n");
			fw.append("    " + generateAcnta(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating ACNTN Script: ");
			fw.append(generateJSMethodStart("callAcntnPrompt") + "\n");
			fw.append("    " + generateAcntn(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating BRNCH Script: ");
			fw.append(generateJSMethodStart("callBrnchNumberPrompt") + "\n");
			fw.append("    " + generateBrnchNumber(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating BRNCH Script: ");
			fw.append(generateJSMethodStart("callBranchMnemonicPrompt") + "\n");
			fw.append("    " + generateBrnchMnemonic(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating EXTACC Script: ");
			fw.append(generateJSMethodStart("callExternalAccountPrompt") + "\n");
			fw.append("    " + generateEAN(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating IBAN Script: ");
			fw.append(generateJSMethodStart("callIBANPrompt") + "\n");
			fw.append("    " + generateIBAN(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating DEAL Script: ");
			fw.append(generateJSMethodStart("callDealPrompt") + "\n");
			fw.append("    " + generateDeal(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			System.out.println("Creating LNK Customer Script: ");
			fw.append(generateJSMethodStart("callLnkCustomerPrompt") + "\n");
			fw.append("    " + generateLnkCust(new GlobalPromptGenerator(te.getEquationUser())));
			fw.append("\n}");

			// TODO: temporary hack for LNK
			fw.append("\nfunction callCusmPromptH(header,button)");
			fw.append("\n{");
			fw.append("\n	setPromptHTMLButtonNoWF(header, 'CUST_LOC', 'CUSM', '', '','', '', ['SYSTEM','UNIT','UNITDESC','GFCUS','GFCLC','GFCPNC','GFCUN','GFBRNM'],['System','Unit','Unit Description','Customer<BR>mnemonic','Customer<BR>location','Customer&#92;&#39;s<BR>basic<BR>number','Customer full name','Branch<BR>mnemonic'],['0','8','11','31','37','40','46','81'],['8','3','20','6','3','6','35','4'],0,0,'SYSTEM,.*,0,8,N,N,,N,UNIT,.*,8,3,N,N,,N,UNITDESC,.*,11,20,N,N,,N,GFCUS,CUST_MNEM,31,6,N,N,A,N,GFCLC,CUST_LOC,37,3,N,N,A,N,GFCPNC,.*,40,6,N,N,A,N,GFCUN,.*,46,35,N,N,A,N,GFBRNM,.*,81,4,N,N,A,N,GFCUS,CUST_MNEM$$$DB,31,6,Y,N,A,N,GFCLC,CUST_LOC$$$DB,37,3,Y,N,A,N,SYSTEM,SYSTEM,0,8,Y,N,,N,UNIT,UNIT,8,3,Y,N,,N,GFCPNC,CUST,40,6,Y,N,A,N,GFCUN,CUST_FNAME,46,35,Y,N,A,N',['','','','GFCUS','GFCLC','GFCPNC','GFCUN','GFBRNM'],[' ',' ',' ',' ',' ',' ',' ',' '],16,button);");
			fw.append("\n}");

			fw.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		catch (EQException e)
		{
			e.printStackTrace();
		}
	}
	public static void main(String[] args)
	{
		new GlobalPromptGeneratorStub();
	}

	/**
	 * Generates a CUSN PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the CUSN P/V
	 */
	private String generateLnkCust(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("CUST_FNAME", "CUST");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "CUST_FNAME", "CustomerFullName", "A", "35", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "CUST", "Customer", "A", "6", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "CUSN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "CUST", "FS1", "CUST", "CUSN", "GFCPNC");
		fg.addValidateMappingFromPV("FS1", "CUST", "CUSN", "GFCPNC", "FS1", "CUST", MappingToolbox.TYPE_PRIMITIVE);

		// Add Mappings back to System and Unit fields.
		addSystemAndUnitMappings("CUST", "CUSN", fg);

		// Add mappings back to function specific input fields
		fg.addValidateMappingFromPV("FS1", "CUST", "CUSN", "GFCUN", "FS1", "CUST_FNAME", MappingToolbox.TYPE_INPUT);

		// function.
		return genny.getPVString("CUSN", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a CUSN PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the CUSN P/V
	 */
	private String generateCusn(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("CUST_FNAME", "CUST");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "CUST_FNAME", "CustomerFullName", "A", "35", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "CUST", "Customer", "A", "6", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "CUSN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "CUST", "FS1", "CUST", "CUSN", "GFCPNC");
		fg.addValidateMappingFromPV("FS1", "CUST", "CUSN", "GFCPNC", "FS1", "CUST", MappingToolbox.TYPE_PRIMITIVE);

		// Add Mappings back to System and Unit fields.
		addSystemAndUnitMappings("CUST", "CUSN", fg);

		// Add mappings back to function specific input fields
		fg.addValidateMappingFromPV("FS1", "CUST", "CUSN", "GFCUN", "FS1", "CUST_FNAME", MappingToolbox.TYPE_INPUT);

		// function.
		return genny.getPVString("CUSN", fg.getFunction(), inputField, functionData);
	}
	/**
	 * Generates a CUSM PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the CUSM P/V
	 */
	private String generateCusm(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("CUST", "CUST_FNAME", "CUST_MNEM", "CUST_LOC");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "CUST", "Customer Number", "A", "6", "");

		createInputField(inputFieldSet, attributeSet, "CUST_FNAME", "CustomerFullName", "A", "35", "");
		createInputField(inputFieldSet, attributeSet, "CUST_MNEM", "Customer Mnemonic", "A", "6", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "CUST_LOC", "Location", "A", "3", "");

		// Add inputField to PV
		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "CUSM", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "CUST_MNEM", "FS1", "CUST_LOC", "CUSM", "GFCUS");
		fg.addValidateMappingToPV("FS1", "CUST_LOC", "FS1", "CUST_LOC", "CUSM", "GFCLC");
		fg.addValidateMappingFromPV("FS1", "CUST_LOC", "CUSM", "GFCUS", "FS1", "CUST_MNEM", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "CUST_LOC", "CUSM", "GFCLC", "FS1", "CUST_LOC", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("CUST_LOC", "CUSM", fg);
		fg.addValidateMappingFromPV("FS1", "CUST_LOC", "CUSM", "GFCPNC", "FS1", "CUST", MappingToolbox.TYPE_INPUT);
		fg.addValidateMappingFromPV("FS1", "CUST_LOC", "CUSM", "GFCUN", "FS1", "CUST_FNAME", MappingToolbox.TYPE_INPUT);

		// function.
		return genny.getPVString("CUSM", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a ACNTN PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the ACNTN P/V
	 */
	private String generateAcntn(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("ACCNTBRCH", "ACCNTNO", "ACCNTSFX");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "ACCNTBRCH", "Branch", "A", "4", "");
		createInputField(inputFieldSet, attributeSet, "ACCNTNO", "Number", "A", "6", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "ACCNTSFX", "Suffix", "A", "3", "");

		// User id
		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "ACNTN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "ACCNTBRCH", "FS1", "ACCNTSFX", "ACNTN", "SCAB");
		fg.addValidateMappingToPV("FS1", "ACCNTNO", "FS1", "ACCNTSFX", "ACNTN", "SCAN");
		fg.addValidateMappingToPV("FS1", "ACCNTSFX", "FS1", "ACCNTSFX", "ACNTN", "SCAS");
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAB", "FS1", "ACCNTBRCH", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAN", "FS1", "ACCNTNO", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAS", "FS1", "ACCNTSFX", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("ACCNTSFX", "ACNTN", fg);

		// function.
		return genny.getPVString("ACNTN", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a ACNTA PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the ACNTA P/V
	 */
	private String generateAcnta(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("ACCNTBRCH", "ACCNTNO", "ACCNTSFX");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "ACCNTBRCH", "Branch", "A", "4", "");
		createInputField(inputFieldSet, attributeSet, "ACCNTNO", "Number", "A", "6", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "ACCNTSFX", "Suffix", "A", "3", "");

		// User id
		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "ACNTN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "ACCNTBRCH", "FS1", "ACCNTSFX", "ACNTN", "SCAB");
		fg.addValidateMappingToPV("FS1", "ACCNTNO", "FS1", "ACCNTSFX", "ACNTN", "SCAN");
		fg.addValidateMappingToPV("FS1", "ACCNTSFX", "FS1", "ACCNTSFX", "ACNTN", "SCAS");
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAB", "FS1", "ACCNTBRCH", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAN", "FS1", "ACCNTNO", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "ACCNTSFX", "ACNTN", "SCAS", "FS1", "ACCNTSFX", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("ACCNTSFX", "ACNTN", fg);

		// function.
		return genny.getPVString("ACNTN", fg.getFunction(), inputField, functionData);
	}
	/**
	 * Generates an EAN PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the ACNTN P/V
	 */
	private String generateEAN(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("EXTACCNT");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		InputField inputField = createInputField(inputFieldSet, attributeSet, "EXTACCNT", "External Account Number", "A", "20", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "ACNTN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "EXTACCNT", "FS1", "EXTACCNT", "ACNTN", "NEEAN");
		fg.addValidateMappingFromPV("FS1", "EXTACCNT", "ACNTN", "NEEAN", "FS1", "EXTACCNT", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("EXTACCNT", "ACNTN", fg);

		// function.
		return genny.getPVString("ACNTN", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates an IBAN PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the ACNTN P/V
	 */
	private String generateIBAN(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("IBAN");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		InputField inputField = createInputField(inputFieldSet, attributeSet, "IBAN", "IBAN", "A", "34", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "ACNTN", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "IBAN", "FS1", "IBAN", "ACNTN", "NEIBAN");
		fg.addValidateMappingFromPV("FS1", "IBAN", "ACNTN", "NEIBAN", "FS1", "IBAN", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("IBAN", "ACNTN", fg);

		// function.
		return genny.getPVString("ACNTN", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a BRNCH Number PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the BRNCH P/V
	 */
	private String generateBrnchNumber(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("BRANCHNO");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		InputField inputField = createInputField(inputFieldSet, attributeSet, "BRANCHNO", "Branch Number", "A", "4", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "BRNCH", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "BRANCHNO", "FS1", "BRANCHNO", "BRNCH", "HVBBN");
		fg.addValidateMappingFromPV("FS1", "BRANCHNO", "BRNCH", "HVBBN", "FS1", "BRANCHNO", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("BRANCHNO", "BRNCH", fg);

		// function.
		return genny.getPVString("BRNCH", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a BRNCH Mnemonic PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the BRNCH P/V
	 */
	private String generateBrnchMnemonic(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("BRCHMNEM");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		InputField inputField = createInputField(inputFieldSet, attributeSet, "BRCHMNEM", "Branch Number", "A", "4", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "BRNCH", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "BRCHMNEM", "FS1", "BRCHMNEM", "BRNCH", "CABRNM");
		fg.addValidateMappingFromPV("FS1", "BRCHMNEM", "BRNCH", "CABRNM", "FS1", "BRCHMNEM", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("BRCHMNEM", "BRNCH", fg);

		// function.
		return genny.getPVString("BRNCH", fg.getFunction(), inputField, functionData);
	}

	/**
	 * Generates a DEAL PV String
	 * 
	 * @param genny
	 *            - the <code>GlobalPromptGenerator</code> to use
	 * @return a String representing the DEAL P/V
	 */
	private String generateDeal(GlobalPromptGenerator genny) throws EQException
	{
		FunctionGenerator fg = new FunctionGenerator("", "", "", "", "");
		DisplayFieldSetWrapper fieldSetWrapper = fg.addFieldSet("FS1", "", "");
		InputFieldSet inputFieldSet = fieldSetWrapper.getInputFieldSet();
		DisplayAttributesSet attributeSet = fieldSetWrapper.getDisplayAttributesSet();

		// Function data
		FunctionData functionData = getFunctionData("BRANCHMNEM", "DEALTYPE", "DEALREF");

		// Add System and Unit inputFields
		addSystemAndUnitInputFields(inputFieldSet, attributeSet);

		createInputField(inputFieldSet, attributeSet, "BRANCHMNEM", "Branch", "A", "4", "");
		createInputField(inputFieldSet, attributeSet, "DEALTYPE", "Deal Type", "A", "3", "");
		InputField inputField = createInputField(inputFieldSet, attributeSet, "DEALREF", "Deal Ref", "A", "13", "");

		FunctionToolbox.addPVFieldSet(inputField, FunctionToolbox.getPVFieldSet(session, "DEAL", "", false, "N"));

		fg.addValidateMappingToPV("FS1", "BRANCHMNEM", "FS1", "DEALREF", "DEAL", "OSBRNM");
		fg.addValidateMappingToPV("FS1", "DEALTYPE", "FS1", "DEALREF", "DEAL", "OSDLP");
		fg.addValidateMappingToPV("FS1", "DEALREF", "FS1", "DEALREF", "DEAL", "OSDLR");
		fg.addValidateMappingFromPV("FS1", "DEALREF", "DEAL", "OSBRNM", "FS1", "BRANCHMNEM", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "DEALREF", "DEAL", "OSDLP", "FS1", "DEALTYPE", MappingToolbox.TYPE_PRIMITIVE);
		fg.addValidateMappingFromPV("FS1", "DEALREF", "DEAL", "OSDLR", "FS1", "DEALREF", MappingToolbox.TYPE_PRIMITIVE);

		addSystemAndUnitMappings("DEALREF", "DEAL", fg);

		// function.
		return genny.getPVString("DEAL", fg.getFunction(), inputField, functionData);
	}

	private void addSystemAndUnitInputFields(InputFieldSet inputFieldSet, DisplayAttributesSet attributeSet) throws EQException
	{
		createInputField(inputFieldSet, attributeSet, "SYSTEM", "System", "A", "8", "");
		createInputField(inputFieldSet, attributeSet, "UNIT", "Unit", "A", "3", "");
	}

	/**
	 * Add default System and Unit validate mappings to a given function-generator
	 * 
	 * @param inputField
	 *            - the input field's id as a String
	 * @param pv
	 *            - the Prompt/Validate module name as a String
	 * @param fg
	 *            - the FunctionGenerator
	 * @throws EQException
	 */
	private void addSystemAndUnitMappings(String inputField, String pv, FunctionGenerator fg) throws EQException
	{
		// Add the mappings for System and Unit from the combo fields to the PV
		fg.addValidateMappingToPV("FS1", "SYSTEM", "FS1", inputField, pv, "SYSTEM");
		fg.addValidateMappingToPV("FS1", "UNIT", "FS1", inputField, pv, "UNIT");

		// Add mappings for System and Unit back to global-console fields
		fg.addValidateMappingFromPV("FS1", inputField, pv, "SYSTEM", "FS1", "SYSTEM", MappingToolbox.TYPE_INPUT);
		fg.addValidateMappingFromPV("FS1", inputField, pv, "UNIT", "FS1", "UNIT", MappingToolbox.TYPE_INPUT);
	}

	/**
	 * Get a FunctionData object given a list of fields in String... format - please note that this is for GlobalProcessing only so
	 * all prompts have the System and Unit auto-appended
	 * 
	 * @param args
	 * @return
	 */
	private FunctionData getFunctionData(String... args)
	{
		FunctionData functionData = new FunctionData();
		functionData.addFieldData("SYSTEM", new FieldData());
		functionData.addFieldData("UNIT", new FieldData());

		for (String field : args)
		{
			functionData.addFieldData(field, new FieldData());
		}

		return functionData;
	}

	/**
	 * Generate a JavaScript method initialisation String given a method ID
	 * 
	 * @param methodID
	 * @return a String representing the method header
	 */
	private String generateJSMethodStart(String methodID)
	{
		return "\nfunction " + methodID + "(header)\n{";
	}

	/**
	 * Create an input field on a specified InputFieldSet and apply to a DisplayAttributesSet
	 * 
	 * @param inputFieldSet
	 * @param attributeSet
	 * @param fieldID
	 * @param fieldName
	 * @param fieldType
	 * @param fieldLength
	 * @param fieldDecimals
	 * @return the new InputField
	 * @throws EQException
	 */
	private InputField createInputField(InputFieldSet inputFieldSet, DisplayAttributesSet attributeSet, String fieldID,
					String fieldName, String fieldType, String fieldLength, String fieldDecimals) throws EQException
	{
		// Create Input fields
		InputField inputField = FunctionToolbox.getInputField(fieldID, fieldName, fieldName, fieldType, fieldLength, fieldDecimals);
		DisplayAttributes displayAttributes = FunctionToolbox.getInputFieldAttribute(inputField);
		FunctionToolbox.addInputField(inputFieldSet, inputField);
		FunctionToolbox.addDisplayAttributes(attributeSet, displayAttributes);
		return inputField;
	}
}
