package com.misys.equation.common.internal.dao;

import java.util.Hashtable;
import java.util.List;

import com.misys.equation.common.dao.IINORHRecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.INORHRecordDataModel;
import com.misys.equation.common.internal.dao.mappers.INORHRecordRowMapper;

/**
 * This the INORH-Record Dao implementation. <br>
 * This class is going to provide all back-end services for INORH-Record.
 * 
 * @author deroset
 */
public class INORHRecordDao extends AbsEquationDao implements IINORHRecordDao
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	// default constructor
	public INORHRecordDao()
	{
		super();
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @param sqlWhereStatement
	 *            - the WHERE clause of the SQL statement
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisINORHRecordIsInTheDB(String sqlWhereStatement)
	{
		return checkIfThisRecordIsInTheDB(sqlWhereStatement);
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisINORHRecordIsInTheDB()
	{

		return checkIfThisRecordIsInTheDB(getWhereConditionBaseOnIdRecord());
	}

	/**
	 * This method will return an instance of the preset data model.
	 * 
	 * @return an instance of the preset data model.
	 */
	public INORHRecordDataModel getMyDataModel()
	{

		INORHRecordDataModel INORHRecordDataModel = null;
		AbsRecord record = getRecord();

		if (record instanceof INORHRecordDataModel)
		{
			INORHRecordDataModel = (INORHRecordDataModel) getRecord();

		}
		return INORHRecordDataModel;
	}

	/**
	 * This method will return a <code>String</code> which represents and sql where condition base on the record id.<br>
	 * For example <code>id = getDataModel.getId()</code>
	 * 
	 * @return a <code>String</code> which represents and sql filter.
	 */
	@Override
	protected String getWhereConditionBaseOnIdRecord()
	{
		StringBuilder whereCondition = new StringBuilder("INHORNO='");
		whereCondition.append(getMyDataModel().getOrderNumber());
		whereCondition.append("' ");
		return whereCondition.toString();
	}

	/**
	 * Returns a list of name and ? pairs in the format of:
	 * <p>
	 * field1=?, field2=?, field3=?, ...
	 * 
	 * @return a list of name and ? pairs
	 */
	@Override
	protected String getParameterizedFields()
	{
		String fields = " INHORNO=?, INHOCUS=?, INHODDT=?, INHOXDT=?, INHODTP=?, INHOCNO=?, INHOMED=?, INHODST=?, INHODMT=?, INHOSRC=?, INHOTGTRLS=?, INHORDTXT=?, INHOPARENT=?, INHMEDTXT=?, INHDSPTXT=?, INHDSPCODE=?, INHLICTP=?, INHOCUROBJ=?, INHOCMB=? ";
		return fields;
	}

	/**
	 * Returns a list of the filed's name
	 * 
	 * @return a list of the filed's name
	 */
	@Override
	protected String getFields()
	{
		String fields = " INHORNO, INHOCUS, INHODDT, INHOXDT, INHODTP, INHOCNO, INHOMED, INHODST, INHODMT, INHOSRC, INHOTGTRLS, INHORDTXT, INHOPARENT, INHMEDTXT, INHDSPTXT, INHDSPCODE, INHLICTP, INHOCUROBJ, INHOCMB ";
		return fields;
	}

	/**
	 * Returns a list of the filed's parameters
	 * 
	 * @return the list of the filed's parameters
	 */
	@Override
	protected String getParameters()
	{
		String fields = " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ";
		return fields;
	}

	/**
	 * This method create an array that contains the fields values and Its types. <br>
	 * It will be used by jdbc <code>PreparedStatement</code>
	 * 
	 * @return An array that contains the fields values and Its types.
	 */
	@Override
	public Object[] getParameterizedFieldsValues()
	{
		INORHRecordDataModel dataModel = getMyDataModel();
		Object[] object = new Object[] { dataModel.getOrderNumber(), dataModel.getCustomerCode(), dataModel.getDespatchDate(),
						dataModel.getCutDate(), dataModel.getDespatchType(), dataModel.getCustomerOrderNumber(),
						dataModel.getMediaType(), dataModel.getDestination(), dataModel.getDespatchMethod(),
						dataModel.getGenerateSource(), dataModel.getAs400TargetRelease(), dataModel.getOrderText(),
						dataModel.getParentOrder(), dataModel.getMediaText(), dataModel.getDespatchTypeText(),
						dataModel.getDespatchCode(), dataModel.getLicenceType(), dataModel.getCurrentNumberOfObjects(),
						dataModel.getSizeMB(), };
		return object;
	}
	/**
	 * This method is going execute a Sql query using the filter criteria.
	 * 
	 * @param whereClause
	 *            this is the <code>String</code> that represent the sql filter.
	 * @return a <code>List</code> which contains a records
	 */
	public List<AbsRecord> getRecordBy(String whereClause)
	{
		return getRecordBy(whereClause, new INORHRecordRowMapper());
	}

	/**
	 * This method is going to get all records.
	 * 
	 * @return a <code>List</code> which contains a records
	 */
	public List<AbsRecord> getRecords()
	{
		return getRecordBy(null, new INORHRecordRowMapper());
	}

	/**
	 * This method is going to return a <code>INORHRecordDataModel</code> base on INORHFID
	 * 
	 * @return a <code>INORHRecordDataModel</code> base on INORHFID
	 */
	public INORHRecordDataModel getINORHRecord()
	{
		INORHRecordDataModel INORHRecordDataModel = null;
		List<AbsRecord> results = getRecordBy(getWhereConditionBaseOnIdRecord(), new INORHRecordRowMapper());

		if (!results.isEmpty())
		{

			INORHRecordDataModel = (INORHRecordDataModel) results.get(0);
		}

		return INORHRecordDataModel;
	}

	@Override
	protected Hashtable<String, AbsRecord> createHashtableRecordModel(List<AbsRecord> records)
	{
		return null;
	}
}
