package com.misys.equation.common.internal.dao;

import java.util.Hashtable;
import java.util.List;

import com.misys.equation.common.dao.IOHRecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.OHRecordDataModel;
import com.misys.equation.common.internal.dao.mappers.OHRecordRowMapper;

/**
 * This the GA-Record Dao implementation. <br>
 * This class is going to provide all back-end services for OH-Record.
 * 
 * @author deroset
 */
public class OHRecordDao extends AbsEquationDao implements IOHRecordDao
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";
	public OHRecordDao()
	{
		super();
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @param sqlWhereStatement
	 *            - the WHERE clause of the SQL statement
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisOHRecordIsInTheDB(String sqlWhereStatement)
	{
		return checkIfThisRecordIsInTheDB(sqlWhereStatement);
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisOHRecordIsInTheDB()
	{

		return checkIfThisRecordIsInTheDB(getWhereConditionBaseOnIdRecord());
	}

	/**
	 * This method will return an instance of the preset data model.
	 * 
	 * @return an instance of the preset data model.
	 */
	public OHRecordDataModel getMyDataModel()
	{
		OHRecordDataModel OHRecordDataModel = null;
		AbsRecord record = getRecord();

		if (record instanceof OHRecordDataModel)
		{
			OHRecordDataModel = (OHRecordDataModel) getRecord();

		}
		return OHRecordDataModel;
	}

	/**
	 * This method will return a <code>String</code> which represents and sql where condition base on the record id.<br>
	 * For example <code>id = getDataModel.getId()</code>
	 * 
	 * @return a <code>String</code> which represents and sql filter.
	 */
	@Override
	protected String getWhereConditionBaseOnIdRecord()
	{
		StringBuilder whereCondition = new StringBuilder("OHPHY='");
		whereCondition.append(getMyDataModel().getFileName());
		whereCondition.append("' ");
		return whereCondition.toString();
	}

	/**
	 * Returns a list of name and ? pairs in the format of:
	 * <p>
	 * field1=?, field2=?, field3=?, ...
	 * 
	 * @return a list of name and ? pairs
	 */
	@Override
	protected String getParameterizedFields()
	{
		String fields = " OHDLM=?, OHJFL=?, OHPHY=?, OHURS=?, OHLIB=?, OHOBT=?, OHMSF=?, OHYOFF=?, OHLGL=?, OHPRM=?, OHSHR=?, OHRPB=?, OHRPE=?, OHCC=?, OHBLK=? ";
		return fields;
	}

	/**
	 * Returns a list of the filed's name
	 * 
	 * @return a list of the filed's name
	 */
	@Override
	protected String getFields()
	{
		String fields = " OHDLM, OHJFL, OHPHY, OHURS, OHLIB, OHOBT, OHMSF, OHYOFF, OHLGL, OHPRM, OHSHR, OHRPB, OHRPE, OHCC, OHBLK ";
		return fields;
	}

	/**
	 * Returns a list of the filed's parameters
	 * 
	 * @return the list of the filed's parameters
	 */
	@Override
	protected String getParameters()
	{
		String fields = " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ";
		return fields;
	}

	/**
	 * This method create an array that contains the fields values and Its types. <br>
	 * It will be used by jdbc <code>PreparedStatement</code>
	 * 
	 * @return An array that contains the fields values and Its types.
	 */
	@Override
	public Object[] getParameterizedFieldsValues()
	{
		OHRecordDataModel dataModel = getMyDataModel();

		Object[] object = new Object[] { dataModel.getDateMaintained(), dataModel.getJournalFile(), dataModel.getFileName(),
						dataModel.getCrossUnit(), dataModel.getLibraryType(), dataModel.getFileType(), dataModel.getMarketSec(),
						dataModel.getOfflineProc(), dataModel.getLogicalFile(), dataModel.getParameterFile(),
						dataModel.getFileSharing(), dataModel.getBusinesHourJourn(), dataModel.getEodJourn(),
						dataModel.getCommitControl(), dataModel.getFileBlocking(), };

		return object;
	}

	/**
	 * This method is going execute a Sql query using the filter criteria.
	 * 
	 * @param whereClause
	 *            this is the <code>String</code> that represent the sql filter.
	 * @return a <code>List</code> which contains a records
	 */
	public List<AbsRecord> getRecordBy(String whereClause)
	{
		return getRecordBy(whereClause, new OHRecordRowMapper());
	}

	/**
	 * This method is going to get all records.
	 * 
	 * @return a <code>List</code> which contains a records
	 */
	public List<AbsRecord> getRecords()
	{
		return getRecordBy(null, new OHRecordRowMapper());
	}

	/**
	 * This method is going to return a <code>OHRecordDataModel</code> base on OHFID
	 * 
	 * @return a <code>OHRecordDataModel</code> base on OHFID
	 */
	public OHRecordDataModel getOHRecord()
	{
		OHRecordDataModel OHRecordDataModel = null;
		List<AbsRecord> results = getRecordBy(getWhereConditionBaseOnIdRecord(), new OHRecordRowMapper());

		if (!results.isEmpty())
		{
			OHRecordDataModel = (OHRecordDataModel) results.get(0);
		}
		return OHRecordDataModel;
	}

	@Override
	protected Hashtable<String, AbsRecord> createHashtableRecordModel(List<AbsRecord> records)
	{
		return null;
	}
}
