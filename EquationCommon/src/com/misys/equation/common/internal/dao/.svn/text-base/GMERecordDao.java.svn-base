package com.misys.equation.common.internal.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;

import org.springframework.jdbc.core.RowMapper;

import com.misys.equation.common.dao.IGMERecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.GMEDataModel;

public class GMERecordDao extends AbsEquationDao implements IGMERecordDao
{

	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	@Override
	protected Hashtable<String, AbsRecord> createHashtableRecordModel(List<AbsRecord> records)
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String getFields()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String getParameterizedFields()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected Object[] getParameterizedFieldsValues()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String getParameters()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String getWhereConditionBaseOnIdRecord()
	{
		// TODO Auto-generated method stub
		return null;
	}

	public List<AbsRecord> getRecordBy(String whereClause)
	{
		// TODO Auto-generated method stub
		return null;
	}

	public List<AbsRecord> getRecords()
	{
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("unchecked")
	public Collection<GMEDataModel> getPositions(final String system, final String unit, final String enqCurrency,
					final String enqDate)
	{
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT OJBRNM, SUM(OJNWP) AS PAY, SUM(OJNWR) AS RCV, (SUM(OJNWR)-SUM(OJNWP)) AS NET ");
		sql.append("FROM OJ01LF ");
		sql.append("WHERE OJCCY ='");
		sql.append(enqCurrency);
		sql.append("' AND OJBRNM<>'' ");
		sql.append("AND OJDTE='");
		sql.append(enqDate);
		sql.append("' ");
		sql.append("GROUP BY OJBRNM");

		Collection<GMEDataModel> positions = getJdbcTemplate().query(sql.toString(), new RowMapper()
		{
			public Object mapRow(ResultSet rs, int rowNum) throws SQLException
			{
				GMEDataModel pos = new GMEDataModel();
				pos.setMMSystem(system);
				pos.setMMUnit(unit);
				pos.setMMBranch(rs.getString(1));
				pos.setMMPayAmt(rs.getLong(2));
				pos.setMMReceiveAmt(rs.getLong(3));
				pos.setMMNetAmt(rs.getLong(4));
				return pos;
			}
		});

		return positions;
	}
}