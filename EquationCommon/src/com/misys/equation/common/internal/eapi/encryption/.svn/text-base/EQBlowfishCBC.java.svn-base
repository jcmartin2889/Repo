// ------------------------------------------------------------------------------
// Copyright Misys IBS
//
// Owner: Des Middlemass
//
// Class: EQBlowfishCBC: Implementation of Blowfish encrytion algorihm CBC
//
// Modified version of public BlowfishJ source
// ------------------------------------------------------------------------------
package com.misys.equation.common.internal.eapi.encryption;

public class EQBlowfishCBC extends EQBlowfishECB
{
	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	boolean bLittleEndian;

	// the CBC IV
	int m_nIVLo;
	int m_nIVHi;

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Gets the current CBC IV.
	 * 
	 * @return current CBC IV
	 */
	public long getCBCIV()
	{
		return EQBinConverter.makeLong(m_nIVLo, m_nIVHi);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Gets a copy of the current CBC IV.
	 * 
	 * @param dest
	 *            where to put current CBC IV
	 * @deprecated use getCBCIV(byte[], int) instead
	 */
	@Deprecated
	public void getCBCIV(byte[] dest)
	{
		getCBCIV(dest, 0);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Gets a copy of the current CBC IV.
	 * 
	 * @param dest
	 *            buffer
	 * @param nOfs
	 *            where to start writing
	 */
	public void getCBCIV(byte[] dest, int nOfs)
	{
		EQBinConverter.intToByteArray(m_nIVHi, dest, nOfs);
		EQBinConverter.intToByteArray(m_nIVLo, dest, nOfs + 4);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Sets the current CBC IV (for cipher resets).
	 * 
	 * @param lNewCBCIV
	 *            the new CBC IV
	 */
	public void setCBCIV(long lNewCBCIV)
	{
		m_nIVHi = EQBinConverter.longHi32(lNewCBCIV);
		m_nIVLo = EQBinConverter.longLo32(lNewCBCIV);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Sets the current CBC IV (for cipher resets).
	 * 
	 * @param newCBCIV
	 *            the new CBC IV
	 * @deprecated use setCBCIV(byte[], int) instead
	 */
	@Deprecated
	public void setCBCIV(byte[] newCBCIV)
	{
		setCBCIV(newCBCIV, 0);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Sets the current CBC IV (for cipher resets).
	 * 
	 * @param newCBCIV
	 *            the new CBC IV
	 * @param nOfs
	 *            where to start reading the IV
	 */
	public void setCBCIV(byte[] newCBCIV, int nOfs)
	{
		m_nIVHi = EQBinConverter.byteArrayToInt(newCBCIV, nOfs);
		m_nIVLo = EQBinConverter.byteArrayToInt(newCBCIV, nOfs + 4);
	}

	// /////////////////////////////////////////////////////////////////////////
	/*
	 * Des Middlemass - I've added the ability to modify the encoding (for CBC only) so that this code can also be used with intel
	 * blowfish code (primarily used in testing).
	 */
	/**
	 * Sets the encoding algorithm to consider bytes encoding in LittleEndian format (Intel) default is false, meaning BigEndian
	 * byte order is assumed (motorolla)
	 * 
	 * @param useLittleEndian
	 *            if true use LittleEndian, if false use BigEndian
	 */
	public void setLittleEndianByteOrder(boolean useLittleEndian)
	{
		// System.out.println("LittleEndian byte ordering");
		bLittleEndian = useLittleEndian;
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Default constructor, uses a zero CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @deprecated use BlowfishCBC(byte[], int, int) instead
	 */
	@Deprecated
	public EQBlowfishCBC(byte[] key)
	{
		super(key);
		bLittleEndian = false;
		m_nIVHi = m_nIVLo = 0;
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Constructor, uses a zero CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @param nOfs
	 *            where to start reading the key
	 * @param nLen
	 *            size of the key in bytes
	 */
	public EQBlowfishCBC(byte[] key, int nOfs, int nLen)
	{
		super(key, nOfs, nLen);
		bLittleEndian = false;
		m_nIVHi = m_nIVLo = 0;
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Constructor to define the CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @param lInitCBCIV
	 *            the CBC IV
	 * @deprecated use BlowfishCBC(byte[], int, int, long) instead
	 */
	@Deprecated
	public EQBlowfishCBC(byte[] key, long lInitCBCIV)
	{
		super(key);
		bLittleEndian = false;
		setCBCIV(lInitCBCIV);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Constructor to define the CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @param nOfs
	 *            where to start reading the key
	 * @param nLen
	 *            size of the key in bytes
	 * @param lInitCBCIV
	 *            the CBC IV
	 */
	public EQBlowfishCBC(byte[] key, int nOfs, int nLen, long lInitCBCIV)
	{
		super(key, nOfs, nLen);
		bLittleEndian = false;
		setCBCIV(lInitCBCIV);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Constructor to define the CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @param initCBCIV
	 *            the CBC IV (array with BLOCKSIZE bytes)
	 * @deprecated use BlowfishCBC(byte[], int, int, byte[], int) instead
	 */
	@Deprecated
	public EQBlowfishCBC(byte[] key, byte[] initCBCIV)
	{
		super(key);
		bLittleEndian = false;
		setCBCIV(initCBCIV);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Constructor to define the CBC IV.
	 * 
	 * @param key
	 *            key material, up to MAXKEYLENGTH bytes
	 * @param nOfs
	 *            where to start reading the key
	 * @param nLen
	 *            size of the key in bytes
	 * @param initCBCIV
	 *            the CBC IV
	 * @param nIVOfs
	 *            where to start reading the IV
	 */
	public EQBlowfishCBC(byte[] key, int nOfs, int nLen, byte[] initCBCIV, int nIVOfs)
	{
		super(key, nOfs, nLen);
		bLittleEndian = false;
		setCBCIV(initCBCIV, nIVOfs);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * see BlowfishJ.BlowfishECB#cleanUp()
	 */
	@Override
	public void cleanUp()
	{
		m_nIVHi = m_nIVLo = 0;
		super.cleanUp();
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(byte[], int, byte[], int, int)
	 */
	@Override
	public int encrypt(byte[] inBuf, int nInPos, byte[] outBuf, int nOutPos, int nLen)
	{
		// same speed tricks than in the ECB variant ...
		nLen -= nLen % BLOCKSIZE;
		int nC = nInPos + nLen;
		int[] pbox = m_pbox;
		int nPBox00 = pbox[0];
		int nPBox01 = pbox[1];
		int nPBox02 = pbox[2];
		int nPBox03 = pbox[3];
		int nPBox04 = pbox[4];
		int nPBox05 = pbox[5];
		int nPBox06 = pbox[6];
		int nPBox07 = pbox[7];
		int nPBox08 = pbox[8];
		int nPBox09 = pbox[9];
		int nPBox10 = pbox[10];
		int nPBox11 = pbox[11];
		int nPBox12 = pbox[12];
		int nPBox13 = pbox[13];
		int nPBox14 = pbox[14];
		int nPBox15 = pbox[15];
		int nPBox16 = pbox[16];
		int nPBox17 = pbox[17];
		int[] sbox1 = m_sbox1;
		int[] sbox2 = m_sbox2;
		int[] sbox3 = m_sbox3;
		int[] sbox4 = m_sbox4;
		int nIVHi = m_nIVHi;
		int nIVLo = m_nIVLo;
		int nHi, nLo;
		while (nInPos < nC)
		{
			if (bLittleEndian)
			{
				nHi = inBuf[nInPos++] & 0x00000ff;
				nHi |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nHi |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nHi |= inBuf[nInPos++] << 24;
				nLo = inBuf[nInPos++] & 0x00000ff;
				nLo |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nLo |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nLo |= inBuf[nInPos++] << 24;
				// extra step: chain with IV
				nHi ^= nIVLo;
				nLo ^= nIVHi;
			}
			else
			{
				nHi = inBuf[nInPos++] << 24;
				nHi |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nHi |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nHi |= inBuf[nInPos++] & 0x00000ff;
				nLo = inBuf[nInPos++] << 24;
				nLo |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nLo |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nLo |= inBuf[nInPos++] & 0x00000ff;
				// extra step: chain with IV
				nHi ^= nIVHi;
				nLo ^= nIVLo;
			}
			nHi ^= nPBox00;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox01;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox02;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox03;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox04;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox05;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox06;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox07;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox08;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox09;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox10;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox11;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox12;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox13;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox14;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox15;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox16;
			nLo ^= nPBox17;
			if (bLittleEndian)
			{
				outBuf[nOutPos++] = (byte) nLo;
				outBuf[nOutPos++] = (byte) (nLo >>> 8);
				outBuf[nOutPos++] = (byte) (nLo >>> 16);
				outBuf[nOutPos++] = (byte) (nLo >>> 24);
				outBuf[nOutPos++] = (byte) nHi;
				outBuf[nOutPos++] = (byte) (nHi >>> 8);
				outBuf[nOutPos++] = (byte) (nHi >>> 16);
				outBuf[nOutPos++] = (byte) (nHi >>> 24);
				// (the encrypted block becomes the new IV)
				nIVHi = nHi;
				nIVLo = nLo;
			}
			else
			{
				outBuf[nOutPos++] = (byte) (nLo >>> 24);
				outBuf[nOutPos++] = (byte) (nLo >>> 16);
				outBuf[nOutPos++] = (byte) (nLo >>> 8);
				outBuf[nOutPos++] = (byte) nLo;
				outBuf[nOutPos++] = (byte) (nHi >>> 24);
				outBuf[nOutPos++] = (byte) (nHi >>> 16);
				outBuf[nOutPos++] = (byte) (nHi >>> 8);
				outBuf[nOutPos++] = (byte) nHi;
				// (the encrypted block becomes the new IV)
				nIVHi = nLo;
				nIVLo = nHi;
			}
		}
		m_nIVHi = nIVHi;
		m_nIVLo = nIVLo;
		return nLen;
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(byte[], byte[])
	 * @deprecated use encrypt(byte[], int, byte[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(byte[] inBuf, byte[] outBuf)
	{
		encrypt(inBuf, 0, outBuf, 0, outBuf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(byte[])
	 * @deprecated use encrypt(byte[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(byte[] buf)
	{
		encrypt(buf, 0, buf, 0, buf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(int[], int, int[], int, int)
	 */
	@Override
	public void encrypt(int[] inBuf, int nInPos, int[] outBuf, int nOutPos, int nLen)
	{
		int nC = nInPos + nLen;
		while (nInPos < nC)
		{
			EQBinConverter.intToByteArray(inBuf[nInPos++], m_blockBuf, 0);
			EQBinConverter.intToByteArray(inBuf[nInPos++], m_blockBuf, 4);
			encrypt(m_blockBuf);
			outBuf[nOutPos++] = EQBinConverter.byteArrayToInt(m_blockBuf, 0);
			outBuf[nOutPos++] = EQBinConverter.byteArrayToInt(m_blockBuf, 4);
		}
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(int[], int[])
	 * @deprecated use encrypt(int[], int, int[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(int[] inBuf, int[] outBuf)
	{
		encrypt(inBuf, 0, outBuf, 0, inBuf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(int[])
	 * @deprecated use encrypt(int[], int, int[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(int[] buf)
	{
		encrypt(buf, 0, buf, 0, buf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(long[], int, long[], int, int)
	 */
	@Override
	public void encrypt(long[] inBuf, int nInPos, long[] outBuf, int nOutPos, int nLen)
	{
		int nC = nInPos + nLen;
		while (nInPos < nC)
		{
			EQBinConverter.longToByteArray(inBuf[nInPos++], m_blockBuf, 0);
			encrypt(m_blockBuf);
			outBuf[nOutPos++] = EQBinConverter.byteArrayToInt(m_blockBuf, 0);
		}
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(long[], long[])
	 * @deprecated use encrypt(long[], int, long[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(long[] inBuf, long[] outBuf)
	{
		encrypt(inBuf, 0, outBuf, 0, inBuf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see BlowfishJ.BlowfishECB#encrypt(long[])
	 * @deprecated use encrypt(long[], int, long[], int, int) instead
	 */
	@Deprecated
	@Override
	public void encrypt(long[] buf)
	{
		encrypt(buf, 0, buf, 0, buf.length);
	}

	// /////////////////////////////////////////////////////////////////////////
	/**
	 * @see blowfishj.BlowfishECB#decrypt(byte[], int, byte[], int, int)
	 */
	@Override
	public int decrypt(byte[] inBuf, int nInPos, byte[] outBuf, int nOutPos, int nLen)
	{
		nLen -= nLen % BLOCKSIZE;

		int nC = nInPos + nLen;

		int[] pbox = m_pbox;
		int nPBox00 = pbox[0];
		int nPBox01 = pbox[1];
		int nPBox02 = pbox[2];
		int nPBox03 = pbox[3];
		int nPBox04 = pbox[4];
		int nPBox05 = pbox[5];
		int nPBox06 = pbox[6];
		int nPBox07 = pbox[7];
		int nPBox08 = pbox[8];
		int nPBox09 = pbox[9];
		int nPBox10 = pbox[10];
		int nPBox11 = pbox[11];
		int nPBox12 = pbox[12];
		int nPBox13 = pbox[13];
		int nPBox14 = pbox[14];
		int nPBox15 = pbox[15];
		int nPBox16 = pbox[16];
		int nPBox17 = pbox[17];
		int[] sbox1 = m_sbox1;
		int[] sbox2 = m_sbox2;
		int[] sbox3 = m_sbox3;
		int[] sbox4 = m_sbox4;
		int nIVHi = m_nIVHi;
		int nIVLo = m_nIVLo;

		int nHiTemp, nLoTemp;
		int nHi, nLo;

		while (nInPos < nC)
		{
			if (bLittleEndian)
			{
				nHi = (inBuf[nInPos++] & 0x00000ff);
				nHi |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nHi |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nHi |= inBuf[nInPos++] << 24;

				nLo = (inBuf[nInPos++] & 0x00000ff);
				nLo |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nLo |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nLo |= inBuf[nInPos++] << 24;
			}
			else
			{
				nHi = inBuf[nInPos++] << 24;
				nHi |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nHi |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nHi |= (inBuf[nInPos++] & 0x00000ff);

				nLo = inBuf[nInPos++] << 24;
				nLo |= (inBuf[nInPos++] << 16) & 0x0ff0000;
				nLo |= (inBuf[nInPos++] << 8) & 0x000ff00;
				nLo |= (inBuf[nInPos++] & 0x00000ff);
			}

			// save the current block, it will become the new IV
			nHiTemp = nHi;
			nLoTemp = nLo;

			nHi ^= nPBox17;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox16;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox15;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox14;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox13;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox12;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox11;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox10;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox09;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox08;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox07;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox06;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox05;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox04;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox03;
			nLo ^= (((sbox1[nHi >>> 24] + sbox2[(nHi >>> 16) & 0x0ff]) ^ sbox3[(nHi >>> 8) & 0x0ff]) + sbox4[nHi & 0x0ff])
							^ nPBox02;
			nHi ^= (((sbox1[nLo >>> 24] + sbox2[(nLo >>> 16) & 0x0ff]) ^ sbox3[(nLo >>> 8) & 0x0ff]) + sbox4[nLo & 0x0ff])
							^ nPBox01;
			nLo ^= nPBox00;

			nHi ^= nIVLo;
			nLo ^= nIVHi;

			if (bLittleEndian)
			{
				outBuf[nOutPos++] = (byte) nLo;
				outBuf[nOutPos++] = (byte) (nLo >>> 8);
				outBuf[nOutPos++] = (byte) (nLo >>> 16);
				outBuf[nOutPos++] = (byte) (nLo >>> 24);
				outBuf[nOutPos++] = (byte) nHi;
				outBuf[nOutPos++] = (byte) (nHi >>> 8);
				outBuf[nOutPos++] = (byte) (nHi >>> 16);
				outBuf[nOutPos++] = (byte) (nHi >>> 24);
				nIVHi = nLoTemp;
				nIVLo = nHiTemp;
			}
			else
			{
				outBuf[nOutPos++] = (byte) (nLo >>> 24);
				outBuf[nOutPos++] = (byte) (nLo >>> 16);
				outBuf[nOutPos++] = (byte) (nLo >>> 8);
				outBuf[nOutPos++] = (byte) nLo;
				outBuf[nOutPos++] = (byte) (nHi >>> 24);
				outBuf[nOutPos++] = (byte) (nHi >>> 16);
				outBuf[nOutPos++] = (byte) (nHi >>> 8);
				outBuf[nOutPos++] = (byte) nHi;
				nIVHi = nHiTemp;
				nIVLo = nLoTemp;
			}
		}

		m_nIVHi = nIVHi;
		m_nIVLo = nIVLo;

		return nLen;
	}

}
