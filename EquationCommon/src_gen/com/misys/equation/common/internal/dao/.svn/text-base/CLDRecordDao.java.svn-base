package com.misys.equation.common.internal.dao;

import java.util.Hashtable;
import java.util.List;

import com.misys.equation.common.dao.ICLDRecordDao;
import com.misys.equation.common.dao.beans.AbsRecord;
import com.misys.equation.common.dao.beans.CLDRecordDataModel;
import com.misys.equation.common.internal.dao.mappers.CLDRecordRowMapper;

public class CLDRecordDao extends AbsEquationDao implements ICLDRecordDao
{

	// This attribute is used to store cvs version information.
	public static final String _revision = "$Id$";

	public CLDRecordDao()
	{
		super();
	}

	@Override
	protected String getFields()
	{
		return " CLDGCID, CLDSEQ, CLDSYS, CLDCOUN, CLDCNO, CLDMFLG, CLDID ";
	}

	@Override
	protected String getParameterizedFields()
	{
		return " CLDGCID=?, CLDSEQ=?, CLDSYS=?, CLDCOUN=?, CLDCNO=?, CLDMFLG=?, CLDID=? ";
	}

	@Override
	protected String getParameters()
	{
		return " ?, ?, ?, ?, ?, ?, ? ";
	}

	/**
	 * This method will return an instance of the preset data model.
	 * 
	 * @return CLDRecordDataModel - Data model
	 */
	public CLDRecordDataModel getMyDataModel()
	{
		CLDRecordDataModel recordDataModel = null;
		AbsRecord record = getRecord();

		if (record instanceof CLDRecordDataModel)
		{
			recordDataModel = (CLDRecordDataModel) getRecord();

		}
		return recordDataModel;
	}

	/**
	 * This method create an array that containing the fields values and its types. <br>
	 * It will be used by JDBC <code>PreparedStatement</code>.
	 * 
	 * @return Object[] - Parameterised Fields Values
	 */
	@Override
	protected Object[] getParameterizedFieldsValues()
	{
		CLDRecordDataModel dataModel = getMyDataModel();
		Object[] object = new Object[] { dataModel.getGlobalCustomerId().toUpperCase(), dataModel.getSequenceNumber(),
						dataModel.getSystemName(), dataModel.getCustomerOwningUnit(), dataModel.getCustomerNumber(),
						dataModel.isMasterFlag() ? "Y" : "N", dataModel.getSyncID() };
		return object;
	}

	@Override
	protected String getWhereConditionBaseOnIdRecord()
	{
		StringBuilder whereCondition = new StringBuilder("CLDGCID='");
		whereCondition.append(getMyDataModel().getGlobalCustomerId());
		whereCondition.append("'");
		whereCondition.append(" AND ");
		whereCondition.append(" CLDSYS='");
		whereCondition.append(getMyDataModel().getSystemName() + "' ");
		whereCondition.append(" AND ");
		whereCondition.append(" CLDCOUN='");
		whereCondition.append(getMyDataModel().getCustomerOwningUnit() + "' ");
		return whereCondition.toString();
	}

	public List<AbsRecord> getRecordBy(String whereClause)
	{
		return getRecordBy(whereClause, new CLDRecordRowMapper());
	}

	public List<AbsRecord> getRecords()
	{
		return getRecordBy(" ORDER BY CLDGCID, CLDSEQ ", new CLDRecordRowMapper());
	}

	@Override
	protected Hashtable<String, AbsRecord> createHashtableRecordModel(List<AbsRecord> records)
	{
		throw new UnsupportedOperationException(
						"CLDRecordDao: createHashtableRecordModel() - This method has not been implemented for this DAO.");
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @param sqlWhereStatement
	 *            - the WHERE clause of the SQL statement
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisCLDRecordIsInTheDB(String sqlWhereStatement)
	{

		return checkIfThisRecordIsInTheDB(sqlWhereStatement);
	}

	/**
	 * This method will check if the current record was already set in the database. <br>
	 * The Sql <code>SELECT COUNT(*)</code> query will be executed.
	 * 
	 * @return true if the SQL statement returns a count >= 1
	 */
	public boolean checkIfThisCLDRecordIsInTheDB()
	{

		return checkIfThisRecordIsInTheDB(getWhereConditionBaseOnIdRecord());
	}

	/**
	 * This method is going to return a <code>CHRecordDataModel</code> base on CHFID
	 * 
	 * @return a <code>CLDRecordDataModel</code> base on CHFID
	 */
	public CLDRecordDataModel getCLDRecord()
	{
		CLDRecordDataModel cldRecordDataModel = null;
		List<AbsRecord> results = getRecordBy(getWhereConditionBaseOnIdRecord(), new CLDRecordRowMapper());

		if (!results.isEmpty())
		{

			cldRecordDataModel = (CLDRecordDataModel) results.get(0);
		}

		return cldRecordDataModel;
	}

}